<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GitLab安装</title>
    <link href="/2021/06/25/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux/GitLab%E5%AE%89%E8%A3%85/"/>
    <url>/2021/06/25/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux/GitLab%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h2><p>GitLab是一个基于git实现的在线代码仓库托管软件，一般用于在企业、学校等内部网络搭建专属git仓库，越来越多的企业在使用gitlab作为项目托管仓库，社区版（ce）免费，大部分公司一般够用，企业版（ee）收费，功能更强大。</p><ol><li><p>配置yum源</p><p> #下载此脚本并运行，会自动下载当前系统的yum源，/etc/yum.repos.d/gitlab_gitlab-ce.repo</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl https:<span class="hljs-regexp">//</span>packages.gitlab.com<span class="hljs-regexp">/install/</span>repositories<span class="hljs-regexp">/gitlab/gi</span>tlab-ce/script.rpm.sh | sudo bash<br></code></pre></td></tr></table></figure></li><li><p>使用命令<code>ls /etc/yum.repos.d/</code> 可以看到已经下载的<code>yum</code>源<code>gitlab_gitlab-ee.repo</code></p><p> 下载速度慢可以使用国内数据源，更换步骤如下：</p><p> 删除<code>gitlab_gitlab-ee.repo</code>文件</p><p> 新建文件<code>vim /etc/yum.repos.d/gitlab-ce.repo</code>,填入如下内容：</p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[gitlab-ce]</span><br><span class="hljs-attr">name</span>=Gitlab CE Repository<br><span class="hljs-attr">baseurl</span>=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el<span class="hljs-variable">$releasever</span>/<br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>开始安装过程</p> <figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#刷新yum缓存</span><br>sudo yum makecache<br><span class="hljs-meta">#安装</span><br>sudo yum install -y gitlab-ce<br></code></pre></td></tr></table></figure></li><li><p>配置访问地址</p><p> <code>vim /etc/gitlab/gitlab.rb</code>，修改<code>external_url</code></p></li><li><p>应用初始化</p><p> 执行<code>gitlab-ctl reconfigure</code> #执行此命令重新加载配置且同时启动gitlab所有服务</p></li><li><p>常用命令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">gitlab-ctl status <span class="hljs-comment">#查看是否启动</span><br>gitlab-ctl <span class="hljs-literal">start</span>  <span class="hljs-comment">#没有启动可以启动</span><br>gitlab-ctl restart <span class="hljs-comment">#重新启动下</span><br>gitlab-ctl <span class="hljs-literal">stop</span> <span class="hljs-comment">#停止</span><br>gitlab-ctl --help <span class="hljs-comment">#查看更多命令</span><br></code></pre></td></tr></table></figure></li><li><p>修改root密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#1执行</span><br>gitlab-rails console -e production<br><span class="hljs-meta">#2 查询root用户</span><br>&gt; <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>.<span class="hljs-keyword">where</span>(username:&quot;root&quot;).first<br>=&gt; #&lt;<span class="hljs-keyword">User</span> id:<span class="hljs-number">1</span> @root&gt;<br><span class="hljs-meta">#3 新密码</span><br><span class="hljs-keyword">user</span>.<span class="hljs-keyword">password</span>=“test”<br><span class="hljs-meta">#4 密码确认</span><br><span class="hljs-keyword">user</span>.password_confirmation=“test”<br><span class="hljs-meta">#5 保存</span><br><span class="hljs-keyword">user</span>.save<br><span class="hljs-meta">#6 退出</span><br>quit<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>服务器</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nebula Graph</title>
    <link href="/2021/06/10/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/Nebula%20Graph/Nebula%20Graph/"/>
    <url>/2021/06/10/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/Nebula%20Graph/Nebula%20Graph/</url>
    
    <content type="html"><![CDATA[<h2 id="Nebula-Graph"><a href="#Nebula-Graph" class="headerlink" title="Nebula Graph"></a>Nebula Graph</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>Nebula Graph数据模型使用6种基本的数据结构：</p><ul><li><p>图空间（space）</p><p>图空间用于隔离不同团队或者项目的数据，不同图空间的数据是相互隔离的，可以指定不同的存储副本数，权限，分片等。</p></li><li><p>点（vertex）</p><p>点用来保存实体对象。特点：</p><ul><li>点是用标识符（VID）标识的。VID在同一空间里是唯一的。VID是一个<code>int64</code>或者是<code>fixed_string(N)</code>。</li><li>点至少必须有一个标签（Tag），也可以有多个标签。</li></ul></li><li><p>边（edge）</p><p>边是用来连接点的，表示两个点之间的关系或者行为。特点：</p><ul><li>两点之间可以由多条边。</li><li>边是有方向的，不存在无向边。</li><li>四元组<code>&lt;起点VID、边类型（edge type）、边排序值(rank)、终点VID&gt;</code>用于唯一标识一条边。边没有EID。</li><li>一条边有且只有一个边类型。</li><li>一条边有且仅有一个rank，其为int64，默认为0.</li></ul></li><li><p>标签（tag）</p><p> 标签由一组事先预定义的属性构成。</p></li><li><p>边类型（edge type）</p><p>  边类型由一组事先预定义的属性构成。</p></li><li><p>属性（properties）</p><p>属性是指键值对（key-value pair）形式存储的信息。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>StreamSets</title>
    <link href="/2021/06/08/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/StreamSets/StreamSets/"/>
    <url>/2021/06/08/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/StreamSets/StreamSets/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识MySQL</title>
    <link href="/2021/05/26/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/00-%E5%88%9D%E8%AF%86MySQL/"/>
    <url>/2021/05/26/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/00-%E5%88%9D%E8%AF%86MySQL/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL架构"><a href="#MySQL架构" class="headerlink" title="MySQL架构"></a>MySQL架构</h2>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>聊聊ThreadLocal</title>
    <link href="/2021/03/05/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E8%81%8A%E8%81%8AThreadLocal/"/>
    <url>/2021/03/05/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E8%81%8A%E8%81%8AThreadLocal/</url>
    
    <content type="html"><![CDATA[<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>维持线程封闭性的一种规范方法是使用<code>ThreadLocal</code>，这个类能使线程中的某个值与保存值的对象关联起来。提供了<code>get</code>和<code>set</code>方法等访问接口和方法，这些方法为每个使用该变量的的线程都存有一份独立的副本，因此<code>get</code>总是返回由当前执行线程在调用<code>set</code>时设置的最新值。</p><h3 id="官方解释如下："><a href="#官方解释如下：" class="headerlink" title="官方解释如下："></a>官方解释如下：</h3><blockquote><p>This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one (via its get or set method) has its own, independently initialized copy of the variable. ThreadLocal instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID).</p><p>Each thread holds an implicit reference to its copy of a thread-local variable as long as the thread is alive and the ThreadLocal instance is accessible; after a thread goes away, all of its copies of thread-local instances are subject to garbage collection (unless other references to these copies exist).</p></blockquote><p>就是说<code>ThreadLocal</code>提供了线程本地变量，简单点说就是为每个线程都初始化了一份完全独立的变量副本供线程使用。ThreadLocal通常用<code>private static</code>来修饰。当一个线程结束时，它所使用的所有ThreadLocal相对的实例副本都被回收。</p><h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><p><code>ThreadLocal</code>对象通常用于防止对可变的单实例变量(Singleton)或全局变量进行共享。</p><p>项目中经常会用到时间日期转换，所以新建<code>DateFormatUtils</code>工具类,获取我们会有如下写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title">parse</span><span class="hljs-params">(String strDate)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>    <span class="hljs-keyword">return</span> sdf.parse(strDate);<br>&#125;<br></code></pre></td></tr></table></figure><p>这种常见写法首先解决了应用反复创建<code>SimpleDateFormat</code>对象所带来的系统损耗，但是又引来了一个非常重要的问题–并发问题。如果我们在并发环境下使用该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + DateFormatUtils.parse(<span class="hljs-string">&quot;2013-05-24 06:02:20&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>系统运行情况如图所示：</p><img src="/2021/03/05/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E8%81%8A%E8%81%8AThreadLocal/%E8%BF%90%E8%A1%8C%E6%83%85%E5%86%B5.png" class><p>由此我们发现，该方法在多线程环境下会有线程安全的问题。</p><p>解决并发问题的方式有很多，如<code>synchronized</code>，这里使用<code>ThreadLocal</code>来解决此问题。</p><p><code>DateFormatUtils</code>类改造如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;DateFormat&gt; threadLocal = <span class="hljs-keyword">new</span> ThreadLocal&lt;DateFormat&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function">DateFormat <span class="hljs-title">initialValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function">Date <span class="hljs-title">parse</span><span class="hljs-params">(String strDate)</span> <span class="hljs-keyword">throws</span> ParseException </span>&#123;<br>    DateFormat sdf = threadLocal.get();<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> sdf.<span class="hljs-title">parse</span><span class="hljs-params">(strDate)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行成功！</p><h3 id="源码阅读分析"><a href="#源码阅读分析" class="headerlink" title="源码阅读分析"></a>源码阅读分析</h3><ul><li><code>ThreadLocal</code> 结构</li></ul><img src="/2021/03/05/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E8%81%8A%E8%81%8AThreadLocal/ThreadLocal.png" class><ul><li><code>Thread</code>、<code>ThreadLocal</code>、<code>ThreadLocalMap</code> 三者关系</li></ul><img src="/2021/03/05/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/%E8%81%8A%E8%81%8AThreadLocal/Thread&ThreadLocal&ThreadLocalMap%E5%85%B3%E7%B3%BB%E5%9B%BE.png" class><p>可以发现每一个<code>Thread</code>中都有一个<code>ThreadLocalMap</code>。<code>ThreadLocalMap</code>可以看作是一个数组，数组元素是自定义的<code>Entry</code>类型，<code>Entry</code>的<strong>key</strong>是<code>ThreadLocal</code>类型，<strong>value</strong>是<code>Object</code>类型。也就是说一个<code>ThreadLocalMap</code>可以有多个<code>ThreadLocal</code>。</p>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>后端开发</category>
      
      <category>编程语言</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码阅读</tag>
      
      <tag>并发编程的艺术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>07-单例模式</title>
    <link href="/2021/02/24/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/07-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/24/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/07-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p><strong>单例(Singleton)模式</strong>指一个类只有一个实例，且该类能够自主创建该实例。</p><p>单例模式的3个特点：</p><ol><li>单例类只有一个实例对象。</li><li>单例对象必须由单例类来创建。</li><li>单例类对外提供一个访问该单例的全局访问点。</li></ol><h2 id="模式的结构与实现"><a href="#模式的结构与实现" class="headerlink" title="模式的结构与实现"></a>模式的结构与实现</h2><p>单例模式的主要角色：</p><ul><li>单例类：包含一个实例且能自行创建这个实例的类。</li><li>访问类：使用单例的类。<h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><img src="/2021/02/24/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/07-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8FUML.png" class><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2>需求：竞选美国总统<br>  实现代码步骤如下：</li></ul><ol><li>懒汉式单例类（单线程）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//单线程</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazySingleton</span> </span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazySingleton lazySingleton;<br>     <br>     <span class="hljs-comment">//private 避免类在外部被实例化</span><br>     <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazySingleton</span><span class="hljs-params">()</span> </span>&#123;<br><br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazySingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (lazySingleton == <span class="hljs-keyword">null</span>) &#123;<br>             lazySingleton = <span class="hljs-keyword">new</span> LazySingleton();<br>         &#125;<br>         <span class="hljs-keyword">return</span> lazySingleton;<br>     &#125;<br> &#125;<br> <span class="hljs-comment">//多线程</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazySingletonConcurrent</span> </span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> LazySingletonConcurrent lazySingleton;<br><br>     <span class="hljs-comment">//private 避免类在外部被实例化</span><br>     <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazySingletonConcurrent</span><span class="hljs-params">()</span> </span>&#123;<br><br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> LazySingletonConcurrent <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (lazySingleton == <span class="hljs-keyword">null</span>) &#123;<br>             lazySingleton = <span class="hljs-keyword">new</span> LazySingletonConcurrent();<br>         &#125;<br>         <span class="hljs-keyword">return</span> lazySingleton;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li>饿汉式单例类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这种写法特点是类在创建的同时就创建好了静态对象供全局使用，以后不再创建新对象。线程安全。</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HungrySingleton</span> </span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HungrySingleton hungrySingleton = <span class="hljs-keyword">new</span> HungrySingleton();<br><br>     <span class="hljs-comment">//private 避免类在外部被实例化</span><br>     <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">HungrySingleton</span><span class="hljs-params">()</span> </span>&#123;<br><br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HungrySingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">return</span> hungrySingleton;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li>双重检查单例类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//线程安全  推荐写法</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleCheckSingleton</span> </span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> DoubleCheckSingleton doubleCheckSingleton;<br><br>     <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">DoubleCheckSingleton</span><span class="hljs-params">()</span> </span>&#123;<br><br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DoubleCheckSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (doubleCheckSingleton == <span class="hljs-keyword">null</span>) &#123;<br>             <span class="hljs-keyword">synchronized</span> (DoubleCheckSingleton.class) &#123;<br>                 <span class="hljs-keyword">if</span> (doubleCheckSingleton == <span class="hljs-keyword">null</span>) &#123;<br>                     doubleCheckSingleton = <span class="hljs-keyword">new</span> DoubleCheckSingleton();<br>                 &#125;<br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">return</span> doubleCheckSingleton;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li>静态内部类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticSingleton</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">StaticSingleton</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticSingletonInstance</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> StaticSingleton STATIC_SINGLETON = <span class="hljs-keyword">new</span> StaticSingleton();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> StaticSingleton <span class="hljs-title">getinstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> StaticSingletonInstance.STATIC_SINGLETON;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li>枚举单例类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">EnumSingleton</span> </span>&#123;<br>    INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> EnumSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3></li></ol><ul><li>保证内存例只有一个对象实例，减小内存开销。</li><li>避免对资源的多重占用。</li><li>单例模式设置全局访问点，可以优化对共享资源的访问。<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>扩展困难。</li><li>并发测试中，调试困难。</li><li>违反单一原则。<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2></li></ul><ol><li>需要频繁创建的类，使用单例模式可以降低系统内存压力。</li><li>某些只要求生成一个对象的类。</li><li>实例类占用系统资源多，实例化时间长，经常使用。</li><li>频繁实例化，而创建的对象又频繁销毁的类。</li><li>频繁访问数据库或文件的对象。</li><li>需要共享的对象。</li></ol>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06-原型模式</title>
    <link href="/2021/02/23/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/06-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/23/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/06-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p><strong>原型(Prototype)模式</strong>指用一个已经创建的实例作为原型，通过复制该对象来创建一个和对象相同的或者相似的新对象。</p><p>由于无须关心对象具体创建的细节，所以原型模式创建对象非常高效。</p><h2 id="模式的结构与实现"><a href="#模式的结构与实现" class="headerlink" title="模式的结构与实现"></a>模式的结构与实现</h2><p>原型模式的主要角色：</p><ul><li>抽象原型类：规定了具体原型对象必须实现的接口。</li><li>具体原型类：实现抽象原型类的clone()方法，它是可被复制的对象。</li><li>访问类：使用具体原型类中的clone()方法来复制新对象。<h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><img src="/2021/02/23/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/06-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8FUML.png" class><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2>需求：创建一个抽象类Shape和扩展了Shape类的实体类。下一步是定义类ShapeCache，该类把shape对象存储在一个HashMap中，并在请求的时候返回它们的克隆。<br>  实现代码步骤如下：</li></ul><ol><li>抽象原型类<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> <span class="hljs-title">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> id;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">String</span> <span class="hljs-keyword">type</span>;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">void</span> draw();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getId</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setId</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> id</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getType</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">type</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setType</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> <span class="hljs-keyword">type</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = <span class="hljs-keyword">type</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">Object</span> <span class="hljs-function"><span class="hljs-title">clone</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">Object</span> o = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            o = <span class="hljs-built_in">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>具体原型类<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    public <span class="hljs-type">Circle</span>() &#123;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">type</span> = <span class="hljs-string">&quot;Circle&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    void draw() &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;圆圈&quot;</span>);<br>    &#125;<br>&#125;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    public <span class="hljs-type">Rectangle</span>() &#123;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">type</span> = <span class="hljs-string">&quot;Rectangle&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    void draw() &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;长方形&quot;</span>);<br>    &#125;<br>&#125;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    public <span class="hljs-type">Square</span>() &#123;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">type</span> = <span class="hljs-string">&quot;Square&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    void draw() &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;正方形&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建访问类<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeCache</span> &#123;</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HashMap&lt;<span class="hljs-keyword">String</span>, Shape&gt; shapeCache = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Shape <span class="hljs-title">getShape</span><span class="hljs-params">(<span class="hljs-keyword">String</span> id)</span></span>&#123;<br>        Shape shape = shapeCache.<span class="hljs-built_in">get</span>(id);<br>        <span class="hljs-keyword">return</span> (Shape) shape.clone();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadShapeCache</span><span class="hljs-params">()</span> </span>&#123;<br>        Circle <span class="hljs-built_in">circle</span> = <span class="hljs-keyword">new</span> Circle();<br>        <span class="hljs-built_in">circle</span>.setId(<span class="hljs-string">&quot;1&quot;</span>);<br>        shapeCache.<span class="hljs-built_in">put</span>(<span class="hljs-built_in">circle</span>.getId(), <span class="hljs-built_in">circle</span>);<br>        Square square = <span class="hljs-keyword">new</span> Square();<br>        square.setId(<span class="hljs-string">&quot;2&quot;</span>);<br>        shapeCache.<span class="hljs-built_in">put</span>(square.getId(), square);<br>        Rectangle rectangle = <span class="hljs-keyword">new</span> Rectangle();<br>        rectangle.setId(<span class="hljs-string">&quot;3&quot;</span>);<br>        shapeCache.<span class="hljs-built_in">put</span>(rectangle.getId(), rectangle);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>client根据ShapeCache来进行对象克隆<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> Client &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ShapeCache</span>.</span></span>load<span class="hljs-constructor">ShapeCache()</span>;<br>        Shape shape1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ShapeCache</span>.</span></span>get<span class="hljs-constructor">Shape(<span class="hljs-string">&quot;1&quot;</span>)</span>;<br>        shape1.draw<span class="hljs-literal">()</span>;<br>        Shape shape2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ShapeCache</span>.</span></span>get<span class="hljs-constructor">Shape(<span class="hljs-string">&quot;2&quot;</span>)</span>;<br>        shape2.draw<span class="hljs-literal">()</span>;<br>        Shape shape3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ShapeCache</span>.</span></span>get<span class="hljs-constructor">Shape(<span class="hljs-string">&quot;3&quot;</span>)</span>;<br>        shape3.draw<span class="hljs-literal">()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>结果输出<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">圆圈<br>正方形<br>长方形<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3></li></ol><ul><li>性能提高。</li><li>更方便的生成复杂对象。<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>必须实现Cloneable接口。</li><li>需要为每个类配置clone方法。<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2></li></ul><ol><li>需要复制一些对象。</li><li>资源优化（类初始化需要消化非常多的资源）。</li></ol>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05-建造者模式</title>
    <link href="/2021/02/20/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/05-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/20/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/05-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p><strong>建造者(Builder)模式</strong>又称生成器模式，可以实现分步骤创建复杂对象，使用相同的创建代码生成不同类型和形式的对象。</p><p>建造者模式和工厂模式的关注点不同，建造者模式关注的是对象的<strong>组装</strong>过程，而工厂模式更注重的是对象的<strong>创建</strong>过程。两者可以结合使用。</p><h2 id="模式的结构与实现"><a href="#模式的结构与实现" class="headerlink" title="模式的结构与实现"></a>模式的结构与实现</h2><p>建造者模式的主要角色：</p><ul><li>产品角色(Product):包含多个组成部件的复杂对象，由具体创建者来创建其各个零部件。</li><li>抽象建造者(Builder):包含创建产品各个子部件的抽象方法和接口，通常还包含一个返回复杂产品的方法getResult()。</li><li>具体建造者(Concrete Builder):实现Builder接口，完成复杂产品的各个部件的具体创建方法。</li><li>指挥者(Director):调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品信息。<h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><img src="/2021/02/20/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/05-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8FUML.png" class><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2>需求：在肯德基中，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”。<br>  实现代码步骤如下：</li></ul><ol><li>创建产品类<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> coke;<span class="hljs-comment">//可乐</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> hamburger;<span class="hljs-comment">//汉堡</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> fries;<span class="hljs-comment">//薯条</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> chickenWings;<span class="hljs-comment">//鸡翅</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setCoke</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> coke</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.coke = coke;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setHamburger</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> hamburger</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hamburger = hamburger;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setFries</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> fries</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.fries = fries;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setChickenWings</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> chickenWings</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.chickenWings = chickenWings;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;你的选择如下：&quot;</span>);<br>        <span class="hljs-keyword">if</span>(coke!=<span class="hljs-literal">null</span>&amp;&amp;coke.trim()!=<span class="hljs-string">&quot;&quot;</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;可乐&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(hamburger!=<span class="hljs-literal">null</span>&amp;&amp;hamburger.trim()!=<span class="hljs-string">&quot;&quot;</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;汉堡&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(fries!=<span class="hljs-literal">null</span>&amp;&amp;fries.trim()!=<span class="hljs-string">&quot;&quot;</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;薯条&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(chickenWings!=<span class="hljs-literal">null</span>&amp;&amp;chickenWings.trim()!=<span class="hljs-string">&quot;&quot;</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;鸡翅&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建抽象建造者<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">abstract</span> <span class="hljs-title">class</span> <span class="hljs-title">Builder</span> &#123;</span><br>     Product product = <span class="hljs-keyword">new</span> <span class="hljs-type">Product</span>();<br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 建造产品方法</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-class"><span class="hljs-keyword">abstract</span> <span class="hljs-title">void</span> <span class="hljs-title">buildProduct</span>(<span class="hljs-type"></span>);</span><br><span class="hljs-class"></span><br><span class="hljs-class">     <span class="hljs-title">Product</span> <span class="hljs-title">getResult</span>(<span class="hljs-type"></span>) &#123;</span><br>         <span class="hljs-keyword">return</span> product;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li>创建具体建造者，这里只有两个套餐所以有两个具体建造者<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteBuilder1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Builder</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    void buildProduct()&#123;<br>        product.setCoke(<span class="hljs-string">&quot;可口可乐&quot;</span>);<br>        product.setHamburger(<span class="hljs-string">&quot;汉堡&quot;</span>);<br>        product.setChickenWings(<span class="hljs-string">&quot;鸡翅&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteBuilder2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Builder</span></span>&#123;<br>     <span class="hljs-meta">@Override</span><br>     void buildProduct()&#123;<br>         product.setCoke(<span class="hljs-string">&quot;可口可乐&quot;</span>);<br>         product.setHamburger(<span class="hljs-string">&quot;汉堡&quot;</span>);<br>         product.setFries(<span class="hljs-string">&quot;薯条&quot;</span>);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li>创建指挥者<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Director</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Builder builder;<br><br>    <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setBuilder</span>(<span class="hljs-params">Builder builder</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.builder = builder;<br>    &#125;<br><br>    Product <span class="hljs-function"><span class="hljs-title">construct</span>(<span class="hljs-params"></span>)</span> &#123;<br>        builder.buildProduct();<br>        <span class="hljs-keyword">return</span> builder.getResult();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>client根据调用工厂类静态方法，通过不通参数创建不同的产品实例<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>        Director director = <span class="hljs-keyword">new</span> Director();<br>        ConcreteBuilder1 concreteBuilder = <span class="hljs-keyword">new</span> ConcreteBuilder1();<span class="hljs-comment">//不同套餐输出不同</span><br>        director.setBuilder(concreteBuilder);<br>        Product construct = director.construct();<br>        construct.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>结果输出<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">你的选择如下：<br>可乐<br>汉堡<br>鸡翅<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3></li></ol><ul><li>封装性好，构建与表示分离。</li><li>扩展性好，各个具体建造者互相独立。</li><li>客户端不需要知道产品内部组成细节，建造者可以对产品创建过程逐渐细化。<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>产品的组成部分必须相同，限制了适用范围。</li><li>如果产品内部发生变化，需要建造者同步修改，维护成本高。<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2></li></ul><ol><li>相同的方法，不同执行顺序，产生不同结果。</li><li>构造复杂对象。</li></ol>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04-抽象工厂模式</title>
    <link href="/2021/02/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><strong>抽象工厂（AbstractFactory）模式</strong>是一种为访问类提供一个创建一组相关或互相依赖对象的接口，且访问者无需指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p><p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式一个工厂只能生产一个产品，而抽象工厂模式一个工厂可以生成多个产品。</p><h2 id="模式的结构与实现"><a href="#模式的结构与实现" class="headerlink" title="模式的结构与实现"></a>模式的结构与实现</h2><p>简单工厂模式的主要角色：</p><ul><li>抽象工厂(Abstract Factory):提供了创建产品的接口，包含多个newProduct()方法，可以创建多个不同等级的产品。</li><li>具体工厂(Factory)：主要实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品(AbstractProduct)：定义了产品的规范，描述了产品的主要特征和功能。抽象工厂模式有多个抽象产品。</li><li>具体产品(Product)：实现抽象产品角色所定义的接口，由具体工厂来创建，同具体工厂是多对一的关系。<h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><img src="/2021/02/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8FUML.png" class><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2>需求：家具生产商，可以生产出一系列产品，如<code>椅子Chair</code>、<code>沙发Sofa</code>，产品由不同的风格，如<code>现代Modern</code>、<code>维多利亚Victorian</code>。顾客前来购买需要按整套风格来选择，所以需要设法单独生成每一件家具才可以确保风格一致。<br>  实现代码步骤如下：</li></ul><ol><li>创建产品顶层抽象类,这里需要抽象出两接口<code>AbstractProductChair</code>,<code>AbstractProductSofa</code><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//抽象产品椅子接口</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">AbstractProductChair</span> &#123;<br>     <span class="hljs-built_in">void</span> newProduct();<br> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//抽象产品沙发接口</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">AbstractProductSofa</span> &#123;<br>     <span class="hljs-built_in">void</span> newProduct();<br> &#125;<br></code></pre></td></tr></table></figure></li><li>创建具体的产品类<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//现代风格的椅子产品</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">ProductChairModern</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">AbstractProductChair</span> &#123;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> newProduct() &#123;<br>         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;生产现代风格的椅子&quot;</span>);<br>     &#125;<br> &#125;<br><span class="hljs-comment">//维多利亚风格的椅子产品</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">ProductChairVictorian</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">AbstractProductChair</span> &#123;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> newProduct() &#123;<br>         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;生产维多利亚风格的椅子&quot;</span>);<br>     &#125;<br> &#125;<br> <span class="hljs-comment">//现代风格的沙发产品</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">ProductSofaModern</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">AbstractProductSofa</span> &#123;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> newProduct() &#123;<br>         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;生产现代风格的沙发&quot;</span>);<br>     &#125;<br> &#125;<br> <span class="hljs-comment">//维多利亚风格的沙发产品</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">ProductSofaVictorian</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">AbstractProductSofa</span> &#123;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> newProduct() &#123;<br>         System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;生产维多利亚风格的沙发&quot;</span>);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li>创建抽象工厂类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AbstractFactory</span> </span>&#123;<br>    <span class="hljs-function">AbstractProductChair <span class="hljs-title">getProductChair</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">AbstractProductSofa <span class="hljs-title">getProductSofa</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建工厂实现类<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//生产现代风格产品工厂</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractFactoryModern</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">AbstractFactory</span></span></span>&#123;<br><br>     <span class="hljs-keyword">public</span> AbstractProductChair getProductChair() &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">ProductChairModern</span>();<br>     &#125;<br><br>     <span class="hljs-keyword">public</span> AbstractProductSofa getProductSofa() &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">ProductSofaModern</span>();<br>     &#125;<br> &#125;<br> <span class="hljs-comment">//生产维多利亚风格产品工厂</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractFactoryVictorian</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">AbstractFactory</span></span></span>&#123;<br><br>     <span class="hljs-keyword">public</span> AbstractProductChair getProductChair() &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">ProductChairVictorian</span>();<br>     &#125;<br><br>     <span class="hljs-keyword">public</span> AbstractProductSofa getProductSofa() &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">ProductSofaVictorian</span>();<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li>client根据调用工厂类静态方法，通过不通参数创建不同的产品实例<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        AbstractFactoryModern abstractFactoryModern = <span class="hljs-keyword">new</span> <span class="hljs-type">AbstractFactoryModern</span>();<br>        AbstractProductChair productChair = abstractFactoryModern.getProductChair();<br>        productChair.<span class="hljs-keyword">new</span><span class="hljs-type">Product</span>();<br>        AbstractProductSofa productSofa = abstractFactoryModern.getProductSofa();<br>        productSofa.<span class="hljs-keyword">new</span><span class="hljs-type">Product</span>();<br>        AbstractFactoryVictorian abstractFactoryVictorian = <span class="hljs-keyword">new</span> <span class="hljs-type">AbstractFactoryVictorian</span>();<br>        AbstractProductChair productChair1 = abstractFactoryVictorian.getProductChair();<br>        productChair1.<span class="hljs-keyword">new</span><span class="hljs-type">Product</span>();<br>        AbstractProductSofa productSofa1 = abstractFactoryVictorian.getProductSofa();<br>        productSofa1.<span class="hljs-keyword">new</span><span class="hljs-type">Product</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>结果输出<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">生产现代风格的椅子<br>生产现代风格的沙发<br>生产维多利亚风格的椅子<br>生产维多利亚风格的沙发<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3></li></ol><ul><li>可以确保同一工厂生产的产品互相匹配。</li><li>避免了客户端代码和具体产品代码相互耦合。</li><li>单一职责原则。可以将产品生成代码抽取到同一位置，使得代码易于维护。</li><li>开闭原则。 向应用程序中引入新产品变体时，你无需修改客户端代码。<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>由于采用该模式需要向应用中引入众多接口和类，代码可能会比之前更加复杂。<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2></li></ul><ol><li>需要创建的对象是一系列互相关联的的产品族。</li><li>系统中有多个产品族，但每次只使用其中某一个产品族的产品。</li></ol>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-工厂方法模式</title>
    <link href="/2021/02/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p><strong>工厂方法模式</strong>是对简单工厂模式的进一步抽象化，好处是可以是系统在不修改原有代码情况下引入新的产品，即满足开闭原则。</p><h2 id="模式的结构与实现"><a href="#模式的结构与实现" class="headerlink" title="模式的结构与实现"></a>模式的结构与实现</h2><p>简单工厂模式的主要角色：</p><ul><li><p>抽象工厂(Abstract Factory):提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</p></li><li><p>具体工厂(Factory)：主要实现抽象工厂中的抽象方法，完成具体产品的创建。</p></li><li><p>抽象产品(AbstractProduct)：定义了产品的规范，描述了产品的主要特征和功能。</p></li><li><p>具体产品(Product)：实现抽象产品角色所定义的接口，由具体工厂来创建，和具体工厂一一对应。</p><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><img src="/2021/02/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8FUML.png" class><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>需求：创建一个可以绘制不同形状的绘图工具，可以绘制圆形，正方形，三角形，每个图形都会有一个draw()方法用于绘图。</p><p>  分析可知正方形，三角形，圆都有一个共同的draw方法，所以在它们的公共父类(AbstractProduct)里声明一个draw方法。<br>  实现代码步骤如下：</p></li></ul><ol><li>创建产品顶层抽象类,定义具体产品的公共接口<code>AbstractProduct</code><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">AbstractProduct</span> &#123;<br>    <span class="hljs-built_in">void</span> draw();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建具体的产品类<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//圆形产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleShape</span> <span class="hljs-title">implements</span>  <span class="hljs-title">AbstractProduct</span> &#123;</span><br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CircleShape</span><span class="hljs-params">()</span></span>&#123;<br>         System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;CircleShape created&quot;</span>);<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>         System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;CircleShape 正在绘制圆形图案&quot;</span>);<br>     &#125;<br>&#125;<br><span class="hljs-comment">//正方形产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RectShape</span> <span class="hljs-title">implements</span> <span class="hljs-title">AbstractProduct</span> &#123;</span><br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RectShape</span><span class="hljs-params">()</span></span>&#123;<br>         System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;RectShape created&quot;</span>);<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>         System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;RectShape 正在正方形图案&quot;</span>);<br>     &#125;<br> &#125;<br> <span class="hljs-comment">//三角形产品</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TriangleShape</span> <span class="hljs-title">implements</span> <span class="hljs-title">AbstractProduct</span> &#123;</span><br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TriangleShape</span><span class="hljs-params">()</span></span>&#123;<br>         System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;TriangleShape created&quot;</span>);<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>         System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;TriangleShape 正在绘制三角形图案&quot;</span>);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li>创建抽象工厂类<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ShapeFactory</span> &#123;<br>     AbstractProduct getProduct();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建工厂实现类<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleShapeFactory</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">ShapeFactory</span></span> </span>&#123;<br>    <span class="hljs-keyword">public</span> AbstractProduct getProduct() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">CircleShape</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RectShapeFactory</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">ShapeFactory</span></span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> AbstractProduct getProduct() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">RectShape</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TriangleShapeFactory</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">ShapeFactory</span></span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> AbstractProduct getProduct() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">TriangleShape</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>client根据调用工厂类静态方法，通过不通参数创建不同的产品实例<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>         CircleShapeFactory circleShapeFactory = <span class="hljs-keyword">new</span> <span class="hljs-type">CircleShapeFactory</span>();<br>         AbstractProduct circleShapeFactoryProduct = circleShapeFactory.getProduct();<br>         circleShapeFactoryProduct.draw();<br>         RectShapeFactory rectShapeFactory = <span class="hljs-keyword">new</span> <span class="hljs-type">RectShapeFactory</span>();<br>         AbstractProduct rectShapeFactoryProduct = rectShapeFactory.getProduct();<br>         rectShapeFactoryProduct.draw();<br>         TriangleShapeFactory triangleShapeFactory = <span class="hljs-keyword">new</span> <span class="hljs-type">TriangleShapeFactory</span>();<br>         AbstractProduct triangleShapeFactoryProduct = triangleShapeFactory.getProduct();<br>         triangleShapeFactoryProduct.draw();<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>结果输出<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">CircleShape</span> created<br>CircleShape 正在绘制圆形图案<br>RectShape created<br>RectShape 正在正方形图案<br>TriangleShape created<br>TriangleShape 正在绘制三角形图案<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3></li></ol><ul><li>只需要知道具体工厂的名称就可以得到所要的产品，无需知道产品的具体创建过程。</li><li>灵活性增强，对于新产品的创建，只需多写一个对应的工厂类。</li><li>典型的解耦框架。<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>类的个数增加，代码复杂度增加。</li><li>系统抽象难度增加。</li><li>一个抽象产品只能创建一种产品。<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2></li></ul><ol><li>客户只知道创建产品的工厂名，而不知道具体的产品名。</li><li>创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口。</li><li>客户不关心创建产品的细节，只关心产品的品牌。</li></ol>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-简单工厂模式</title>
    <link href="/2021/02/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p><strong>简单工厂模式</strong>又叫静态方法模式。因为在简单工厂模式中创建的实例的方法通常为静态(static)方法。</p><h2 id="模式的结构与实现"><a href="#模式的结构与实现" class="headerlink" title="模式的结构与实现"></a>模式的结构与实现</h2><p>简单工厂模式的主要角色：</p><ul><li><p>简单工厂(SimpleFactory)：简单工厂模式的核心，负责实现创建所有实例的内部逻辑。工厂类的创建产品类的方法可以直接被外部调用，创建所需的产品对象。</p></li><li><p>抽象产品(AbstractProduct)：简单工厂创建对象的所有对象的父类，负责描述所有实例共有的公共接口。</p></li><li><p>具体产品(Product)：简单工厂模式的创建目标。</p><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><img src="/2021/02/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8FUML.png" class><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>需求：创建一个可以绘制不同形状的绘图工具，可以绘制圆形，正方形，三角形，每个图形都会有一个draw()方法用于绘图。</p><p>  分析可知正方形，三角形，圆都有一个共同的draw方法，所以在它们的公共父类(AbstractProduct)里声明一个draw方法。<br>  实现代码步骤如下：</p></li></ul><ol><li>创建产品顶层抽象类,定义具体产品的公共接口<code>AbstractProduct</code><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">AbstractProduct</span> &#123;<br>    <span class="hljs-built_in">void</span> draw();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建具体的产品类<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//圆形产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleShape</span> <span class="hljs-title">implements</span>  <span class="hljs-title">AbstractProduct</span> &#123;</span><br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CircleShape</span><span class="hljs-params">()</span></span>&#123;<br>         System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;CircleShape created&quot;</span>);<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>         System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;CircleShape 正在绘制圆形图案&quot;</span>);<br>     &#125;<br>&#125;<br><span class="hljs-comment">//正方形产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RectShape</span> <span class="hljs-title">implements</span> <span class="hljs-title">AbstractProduct</span> &#123;</span><br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RectShape</span><span class="hljs-params">()</span></span>&#123;<br>         System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;RectShape created&quot;</span>);<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>         System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;RectShape 正在正方形图案&quot;</span>);<br>     &#125;<br> &#125;<br> <span class="hljs-comment">//三角形产品</span><br> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TriangleShape</span> <span class="hljs-title">implements</span> <span class="hljs-title">AbstractProduct</span> &#123;</span><br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TriangleShape</span><span class="hljs-params">()</span></span>&#123;<br>         System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;TriangleShape created&quot;</span>);<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>         System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;TriangleShape 正在绘制三角形图案&quot;</span>);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li>创建工厂类，通过创建静态方法根据传入的参数创建不通产品实例<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleFactory</span> </span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AbstractProduct <span class="hljs-function"><span class="hljs-title">getShape</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> <span class="hljs-keyword">type</span></span>)</span> &#123;<br>         AbstractProduct shape = <span class="hljs-literal">null</span>;<br>         <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span>.equalsIgnoreCase(<span class="hljs-string">&quot;circle&quot;</span>)) &#123;<br>             shape = <span class="hljs-keyword">new</span> CircleShape();<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span>.equalsIgnoreCase(<span class="hljs-string">&quot;rect&quot;</span>)) &#123;<br>             shape = <span class="hljs-keyword">new</span> RectShape();<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span>.equalsIgnoreCase(<span class="hljs-string">&quot;triangle&quot;</span>)) &#123;<br>             shape = <span class="hljs-keyword">new</span> TriangleShape();<br>         &#125;<br>         <span class="hljs-keyword">return</span> shape;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>client根据调用工厂类静态方法，通过不通参数创建不同的产品实例<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> Client &#123;<br><br>     public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>         AbstractProduct circleShape = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SimpleFactory</span>.</span></span>get<span class="hljs-constructor">Shape(<span class="hljs-string">&quot;circle&quot;</span>)</span>;<br>         circleShape.draw<span class="hljs-literal">()</span>;<br>         circleShape = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SimpleFactory</span>.</span></span>get<span class="hljs-constructor">Shape(<span class="hljs-string">&quot;rect&quot;</span>)</span>;<br>         circleShape.draw<span class="hljs-literal">()</span>;<br>         circleShape = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SimpleFactory</span>.</span></span>get<span class="hljs-constructor">Shape(<span class="hljs-string">&quot;triangle&quot;</span>)</span>;<br>         circleShape.draw<span class="hljs-literal">()</span>;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>结果输出<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">CircleShape</span> created<br>CircleShape 正在绘制圆形图案<br>RectShape created<br>RectShape 正在正方形图案<br>TriangleShape created<br>TriangleShape 正在绘制三角形图案<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3></li></ol><ul><li>将创建实例的工作与使用实例的工作分开，使用者无需关心对象的创建过程，实现了解耦。</li><li>把初始化实例的工作放在了工厂里进行，使得代码更容易维护。<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li><li>工厂类集中了所有实例的创建逻辑，一旦这个工厂不能正常工作，整个系统会受到影响。</li><li>违背开闭原则，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。</li><li>由于使用了静态工厂方法，静态方法不能被重写和继承，会造成工厂角色无法形成基于继承的等级结构。<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2></li></ul><ol><li>客户端不关心对象的创建过程。</li><li>工厂类负责创建的对象（具体产品）比较少。</li></ol>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-设计模式</title>
    <link href="/2021/02/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p><strong>设计模式</strong>是软件设计中常见问题的典型解决方案。</p><p>模式包含的内容：</p><ul><li><strong>意图</strong>部分简单描述问题和解决方案。</li><li><strong>动机</strong>部分将进一步解释问题并说明模式会如何提供解决方案。</li><li><strong>结构</strong>部分展示模式的每个部分和他们之间的关系。</li><li><strong>在不同的语言中实现</strong>提供流行编程语言的代码，让读者更好地理解模式背后的思想。</li></ul><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>不同设计模式的复杂程度，细节层次以及整个系统中应用范围等方面各不相同。</p><p>最基础的、底层的模式通常被称为惯用技巧。</p><p>最通用的、高层的模式是构架模式。</p><p>此外，模式可以根据其意图或者目的来分类。</p><ul><li>创建型模式  提供创建对象的机制，增加已有代码的灵活性和可复用性。</li><li>结构性模式  介绍如何将对象和类组成较大的结构，并同时保持结构的灵活和高效。</li><li>行为模式  负责对象间高效沟通和职责委派。<img src="/2021/02/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.png" class></li></ul>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Babel</title>
    <link href="/2021/02/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Babel/"/>
    <url>/2021/02/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Babel/</url>
    
    <content type="html"><![CDATA[<h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。</p><h3 id="配置文件-babelrc"><a href="#配置文件-babelrc" class="headerlink" title="配置文件.babelrc"></a>配置文件<code>.babelrc</code></h3><p>   Babel的配置文件是<code>.babelrc</code>，存放在项目的根目录下。使用Babel的第一步，就是配置这个文件。该文件用来设置转码规则和插件，基本格式如下:<br>   <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [],<br>  <span class="hljs-attr">&quot;plugins&quot;</span>: []<br> &#125;<br></code></pre></td></tr></table></figure><br><code>presets</code>字段设定转码规则，官方提供以下的规则集，你可以根据需要安装</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment"># ES2015转码规则</span><br>$ npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save-dev babel-preset-es2015</span><br><br><span class="hljs-comment"># react转码规则</span><br>$ npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save-dev babel-preset-react</span><br><br><span class="hljs-comment"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span><br>$ npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save-dev babel-preset-stage-0</span><br>$ npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save-dev babel-preset-stage-1</span><br>$ npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save-dev babel-preset-stage-2</span><br>$ npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save-dev babel-preset-stage-3</span><br></code></pre></td></tr></table></figure><p>然后，将这些规则加入<code>.babelrc</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [<br>    <span class="hljs-string">&quot;es2015&quot;</span>,<br>    <span class="hljs-string">&quot;react&quot;</span>,<br>    <span class="hljs-string">&quot;stage-2&quot;</span><br>  ],<br>  <span class="hljs-attr">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="命令行转码babel-cli"><a href="#命令行转码babel-cli" class="headerlink" title="命令行转码babel-cli"></a>命令行转码babel-cli</h3><p>Babel提供<code>babel-cli</code>工具，用于命令行转码。</p><p>安装命令: <code>npm install --global babel-cli</code></p><p>基本用法如下:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 转码结果输出到标准输出</span><br>$ babel example.js<br><br><span class="hljs-comment"># 转码结果写入一个文件</span><br><span class="hljs-comment"># --out-file 或 -o 参数指定输出文件</span><br>$ babel example.js --<span class="hljs-keyword">out</span>-file compiled.js<br><span class="hljs-comment"># 或者</span><br>$ babel example.js -o compiled.js<br><br><span class="hljs-comment"># 整个目录转码</span><br><span class="hljs-comment"># --out-dir 或 -d 参数指定输出目录</span><br>$ babel src --<span class="hljs-keyword">out</span>-dir <span class="hljs-class"><span class="hljs-keyword">lib</span></span><br><span class="hljs-comment"># 或者</span><br>$ babel src -d <span class="hljs-class"><span class="hljs-keyword">lib</span></span><br><br><span class="hljs-comment"># -s 参数生成source map文件</span><br>$ babel src -d <span class="hljs-class"><span class="hljs-keyword">lib</span> -<span class="hljs-title">s</span></span><br></code></pre></td></tr></table></figure><p>上面代码是在全局环境下，进行Babel转码。这意味着，如果项目要运行，全局环境必须有Babel，也就是说项目产生了对环境的依赖。另一方面，这样做也无法支持不同项目使用不同版本的Babel。</p><p>一个解决办法是将babel-cli安装在项目之中。</p><p><code>npm install --save-dev babel-cli</code></p><p>然后，改写package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;babel-cli&quot;</span>: <span class="hljs-string">&quot;^6.0.0&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;babel src -d lib&quot;</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>转码的时候，就执行命令<code>npm run build</code></p>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6</title>
    <link href="/2021/02/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6/"/>
    <url>/2021/02/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/ES6/</url>
    
    <content type="html"><![CDATA[<h2 id="常用ES6语法"><a href="#常用ES6语法" class="headerlink" title="常用ES6语法"></a>常用ES6语法</h2><ol><li><p><code>var</code>  <code>let</code>  <code>const</code>区别</p><pre><code> 在js中通常使用var，会发生变量提升，即脚本开始运行时，变量已经存在了，但是没有值，所以会输出undefined。 let不会发生变量提升,这表示在声明它之前，变量是不存在的，这时如果用到它，就会抛出一个错误。</code></pre> <figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&#123;<br>    <span class="hljs-keyword">var</span> a <br>    <span class="hljs-keyword">let</span> b<br>&#125;<br><span class="hljs-built_in">console</span>.log(a)<br><span class="hljs-built_in">console</span>.log(b)<br><br>输出：<br><span class="hljs-literal">undefined</span><br>ReferenceError: b <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br></code></pre></td></tr></table></figure></li><li><p><code>var</code>是函数级作用域，<code>let</code>是块级作用域</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <br>&#125;<br><span class="hljs-built_in">console</span>.log(i)<br>输出： <span class="hljs-built_in">ReferenceError</span>: i is not defined<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <br>&#125;<br>输出： <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li><li><p><code>let</code>不允许在相同作用域内，重复声明同一个变量</p></li><li><p><code>const</code>声明一个只读的常量,一旦声明，常量的值就不能改变</p></li><li><p><code>const</code>命令声明的常量也是不提升，只能在声明的位置后面使用</p></li><li><p><code>const</code>声明的常量，也与let一样不可重复声明</p></li><li><p>对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。</p></li></ol><p><strong><code>const</code>命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心。</strong></p><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><ul><li><p>解构赋值是对赋值运算符的扩展</p></li><li><p>是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。</p></li><li><p>在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p><ol><li>数组模型的解构（Array）<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs awk">基本<br>let [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br> <span class="hljs-regexp">//</span> a = <span class="hljs-number">1</span><br> <span class="hljs-regexp">//</span> b = <span class="hljs-number">2</span><br> <span class="hljs-regexp">//</span> c = <span class="hljs-number">3</span><br>可嵌套<br>let [a, [[b], c]] = [<span class="hljs-number">1</span>, [[<span class="hljs-number">2</span>], <span class="hljs-number">3</span>]];<br> <span class="hljs-regexp">//</span> a = <span class="hljs-number">1</span><br> <span class="hljs-regexp">//</span> b = <span class="hljs-number">2</span><br> <span class="hljs-regexp">//</span> c = <span class="hljs-number">3</span><br> 可忽略<br> let [a, , b] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br> <span class="hljs-regexp">//</span> a = <span class="hljs-number">1</span><br> <span class="hljs-regexp">//</span> b = <span class="hljs-number">3</span><br> 不完全解构<br> let [a = <span class="hljs-number">1</span>, b] = []; <br> <span class="hljs-regexp">//</span> a = <span class="hljs-number">1</span>, b = undefined<br> let [a, ...b] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br> 剩余运算符<br> <span class="hljs-regexp">//</span>a = <span class="hljs-number">1</span><br> <span class="hljs-regexp">//</span>b = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br> 字符串等<br> 在数组的解构中，解构的目标若为可遍历对象，皆可进行解构赋值。可遍历对象即实现 Iterator 接口的数据。<br> let [a, b, c, d, e] = <span class="hljs-string">&#x27;hello&#x27;</span>;<br> <span class="hljs-regexp">//</span> a = <span class="hljs-string">&#x27;h&#x27;</span><br> <span class="hljs-regexp">//</span> b = <span class="hljs-string">&#x27;e&#x27;</span><br> <span class="hljs-regexp">//</span> c = <span class="hljs-string">&#x27;l&#x27;</span><br> <span class="hljs-regexp">//</span> d = <span class="hljs-string">&#x27;l&#x27;</span><br> <span class="hljs-regexp">//</span> e = <span class="hljs-string">&#x27;o&#x27;</span><br> 解构默认值<br> let [a = <span class="hljs-number">2</span>] = [undefined]; <br> <span class="hljs-regexp">//</span> a = <span class="hljs-number">2</span><br> 当解构模式有匹配结果，且匹配结果是 undefined 时，会触发默认值作为返回结果。<br> let [a = <span class="hljs-number">3</span>, b = a] = [];     <span class="hljs-regexp">//</span> a = <span class="hljs-number">3</span>, b = <span class="hljs-number">3</span><br> let [a = <span class="hljs-number">3</span>, b = a] = [<span class="hljs-number">1</span>];    <span class="hljs-regexp">//</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">1</span><br> let [a = <span class="hljs-number">3</span>, b = a] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]; <span class="hljs-regexp">//</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li>对象模型的解构（Object）<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs groovy">基本<br>let &#123; foo, bar &#125; = &#123; <span class="hljs-attr">foo:</span> <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">bar:</span> <span class="hljs-string">&#x27;bbb&#x27;</span> &#125;;<br> <span class="hljs-comment">// foo = &#x27;aaa&#x27;</span><br> <span class="hljs-comment">// bar = &#x27;bbb&#x27;</span><br> <br> let &#123; <span class="hljs-attr">baz :</span> foo &#125; = &#123; <span class="hljs-attr">baz :</span> <span class="hljs-string">&#x27;ddd&#x27;</span> &#125;;<br> <span class="hljs-comment">// foo = &#x27;ddd&#x27;</span><br><br>可嵌套可忽略<br>let obj = &#123;<span class="hljs-attr">p:</span> [<span class="hljs-string">&#x27;hello&#x27;</span>, &#123;<span class="hljs-attr">y:</span> <span class="hljs-string">&#x27;world&#x27;</span>&#125;] &#125;;<br>let &#123;<span class="hljs-attr">p:</span> [x, &#123; y &#125;] &#125; = obj;<br> <span class="hljs-comment">// x = &#x27;hello&#x27;</span><br> <span class="hljs-comment">// y = &#x27;world&#x27;</span><br>let obj = &#123;<span class="hljs-attr">p:</span> [<span class="hljs-string">&#x27;hello&#x27;</span>, &#123;<span class="hljs-attr">y:</span> <span class="hljs-string">&#x27;world&#x27;</span>&#125;] &#125;;<br>let &#123;<span class="hljs-attr">p:</span> [x, &#123;  &#125;] &#125; = obj;<br> <span class="hljs-comment">// x = &#x27;hello&#x27; </span><br> <br>不完全解构<br>let obj = &#123;<span class="hljs-attr">p:</span> [&#123;<span class="hljs-attr">y:</span> <span class="hljs-string">&#x27;world&#x27;</span>&#125;] &#125;;<br>let &#123;<span class="hljs-attr">p:</span> [&#123; y &#125;, x ] &#125; = obj;<br> <span class="hljs-comment">// x = undefined</span><br> <span class="hljs-comment">// y = &#x27;world&#x27;</span><br><br>剩余运算符<br>let &#123;a, b, ...rest&#125; = &#123;<span class="hljs-attr">a:</span> <span class="hljs-number">10</span>, <span class="hljs-attr">b:</span> <span class="hljs-number">20</span>, <span class="hljs-attr">c:</span> <span class="hljs-number">30</span>, <span class="hljs-attr">d:</span> <span class="hljs-number">40</span>&#125;;<br> <span class="hljs-comment">// a = 10</span><br> <span class="hljs-comment">// b = 20</span><br> <span class="hljs-comment">// rest = &#123;c: 30, d: 40&#125;</span><br><br>解构默认值<br> let &#123;a = <span class="hljs-number">10</span>, b = <span class="hljs-number">5</span>&#125; = &#123;<span class="hljs-attr">a:</span> <span class="hljs-number">3</span>&#125;;<br> <span class="hljs-comment">// a = 3; b = 5;</span><br> let &#123;<span class="hljs-attr">a:</span> aa = <span class="hljs-number">10</span>, <span class="hljs-attr">b:</span> bb = <span class="hljs-number">5</span>&#125; = &#123;<span class="hljs-attr">a:</span> <span class="hljs-number">3</span>&#125;;<br> <span class="hljs-comment">// aa = 3; bb = 5;</span><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2></li></ol></li><li><p>箭头函数<br>箭头函数提供了一种更加简洁的函数书写方式。基本语法是： <strong>参数 =&gt; 函数体</strong></p><p>基本用法：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> f = <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v;<br><span class="hljs-comment">//等价于</span><br><span class="hljs-keyword">var</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> a;<br>&#125;<br>f(<span class="hljs-number">1</span>);  <span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><p>当箭头函数没有参数或者有多个参数，要用 () 括起来。</p><p>当箭头函数函数体有多行语句，用 {} 包裹起来，表示代码块，当只有一行语句，并且需要返回结果时，可以省略 {} , 结果会自动返回。</p><p>当箭头函数要返回对象的时候，为了区分于代码块，要用 () 将对象包裹起来</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js</title>
    <link href="/2021/02/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/NodeJS/"/>
    <url>/2021/02/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/NodeJS/</url>
    
    <content type="html"><![CDATA[<h2 id="Node-js-简介"><a href="#Node-js-简介" class="headerlink" title="Node.js 简介"></a>Node.js 简介</h2><p>官网 <code>https://nodejs.org/zh-cn/</code></p><p>Node.js 是一个开源与跨平台的 JavaScript 运行时环境。 它是一个可用于几乎任何项目的流行工具！</p><p>Node.js 在浏览器外运行 V8 JavaScript 引擎（Google Chrome 的内核）。 这使 Node.js 表现得非常出色。</p><p>HelloWorld</p><p>新建 <code>HelloWorld.js</code> 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> hostname = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span><br><br><span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.statusCode = <span class="hljs-number">200</span><br>  res.setHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain&#x27;</span>)<br>  res.end(<span class="hljs-string">&#x27;hello world\n&#x27;</span>)<br>&#125;)<br><br>server.listen(port, hostname, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`服务器运行在 http://<span class="hljs-subst">$&#123;hostname&#125;</span>:<span class="hljs-subst">$&#123;port&#125;</span>/`</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>运行： <code>node HelloWorld.js</code></p><img src="/2021/02/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/NodeJS/hello-world.png" class><p>如图所示即启动成功，浏览器访问 <code>http://127.0.0.1:3000/</code>即可</p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p><ul><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>更换镜像源：<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>   //推荐使用淘宝镜像</p><p>查看镜像是否配置成功：<br><code>npm config get registry </code></p><h3 id="使用-npm-命令安装模块"><a href="#使用-npm-命令安装模块" class="headerlink" title="使用 npm 命令安装模块"></a>使用 npm 命令安装模块</h3><p>npm 安装 Node.js 模块语法格式如下：</p><p><code>npm install &lt;Module Name&gt;</code></p><p><strong>npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> express      <span class="hljs-comment"># 本地安装</span><br>npm <span class="hljs-keyword">install</span> express -g   <span class="hljs-comment"># 全局安装</span><br></code></pre></td></tr></table></figure><p>卸载模块<br>  <code>npm uninstall express</code></p>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack</title>
    <link href="/2021/02/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/webpack/"/>
    <url>/2021/02/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/webpack/</url>
    
    <content type="html"><![CDATA[<h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><p>Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><img src="/2021/02/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/webpack/webpack.png" class>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>frp</title>
    <link href="/2021/01/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux/frp/"/>
    <url>/2021/01/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux/frp/</url>
    
    <content type="html"><![CDATA[<h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>frp 主要由 客户端(frpc) 和 服务端(frps) 组成，服务端通常部署在具有公网 IP 的机器上，客户端通常部署在需要穿透的内网服务所在的机器上。</p><p>内网服务由于没有公网 IP，不能被非局域网内的其他用户访问。</p><p>用户通过访问服务端的 frps，由 frp 负责根据请求的端口或其他信息将请求路由到对应的内网机器，从而实现通信。</p><p>文档地址：<code>https://gofrp.org/docs/</code></p><p>下载地址：<code>https://github.com/fatedier/frp/releases</code></p><h3 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h3><p>在具有公网 IP 的机器上部署 frps，修改 frps.ini 文件，这里使用了最简化的配置，设置了 frp 服务器用户接收客户端连接的端口：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br></code></pre></td></tr></table></figure><p>启动命令：<code>./frps -c ./frps.ini</code></p><h3 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h3><p>在需要被访问的内网机器上（SSH 服务通常监听在 22 端口）部署 frpc，修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 <code>x.x.x.x</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = x.x.x.x<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><br><span class="hljs-section">[ssh]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">22</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">6000</span><br></code></pre></td></tr></table></figure><p>local_ip 和 local_port 配置为本地需要暴露到公网的服务地址和端口。remote_port 表示在 frp 服务端监听的端口，访问此端口的流量将会被转发到本地服务对应的端口。</p><p>启动命令：<code>./frpc -c ./frpc.ini</code></p><p>通过 SSH 访问内网机器，假设用户名为 root:</p><p><code>ssh -oPort=6000 root@x.x.x.x</code></p><p>frp 会将请求 x.x.x.x:6000 的流量转发到内网机器的 22 端口。</p><p>更多配置参考文档</p>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>服务器</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>禅道+gitlab+svn密码统一认证</title>
    <link href="/2021/01/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux/%E7%A6%85%E9%81%93+gitlab+svn%E5%AF%86%E7%A0%81%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81/"/>
    <url>/2021/01/19/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux/%E7%A6%85%E9%81%93+gitlab+svn%E5%AF%86%E7%A0%81%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p>openldap+phpadmin 统一鉴权认证</p>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>elastic-search-环境搭建</title>
    <link href="/2021/01/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/docker/docker-compose/docker-compose-elastic-search/"/>
    <url>/2021/01/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/docker/docker-compose/docker-compose-elastic-search/</url>
    
    <content type="html"><![CDATA[<h2 id="elastic-search环境搭建"><a href="#elastic-search环境搭建" class="headerlink" title="elastic-search环境搭建"></a>elastic-search环境搭建</h2><p>创建目录结构为</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">docker</span>-es/<br>├── docker-compose.yaml<br>├── master<br>│   ├── conf<br>│   │   └── elasticsearch.yml<br>│   ├── <span class="hljs-class"><span class="hljs-keyword">data</span></span><br>│   └── logs<br>├── node1<br>│   ├── conf<br>│   │   └── elasticsearch.yml<br>│   ├── <span class="hljs-class"><span class="hljs-keyword">data</span></span><br>│   └── logs<br>└── node2<br>    ├── conf<br>    │   └── elasticsearch.yml<br>    ├── <span class="hljs-class"><span class="hljs-keyword">data</span></span><br>    └── logs<br></code></pre></td></tr></table></figure><p><code>docker-compose.yaml</code> 文件内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs awk">version: <span class="hljs-string">&#x27;3&#x27;</span><br>services:<br>     es-master:<br>       image:  elasticsearch:<span class="hljs-number">7.6</span>.<span class="hljs-number">0</span><br>       container_name: es-master<br>       restart: always<br>       volumes:<br>         - .<span class="hljs-regexp">/master/</span>data:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data:rw<br>         - .<span class="hljs-regexp">/master/</span>conf<span class="hljs-regexp">/elasticsearch.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml<br>         - .<span class="hljs-regexp">/master/</span>logs:<span class="hljs-regexp">/user/</span>share<span class="hljs-regexp">/elasticsearch/</span>logs:rw<br>       ports:<br>         - <span class="hljs-string">&quot;9200:9200&quot;</span><br>         - <span class="hljs-string">&quot;9300:9300&quot;</span><br>       environment:<br>         - <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>                 <br>     es-node1:<br>       image:  elasticsearch:<span class="hljs-number">7.6</span>.<span class="hljs-number">0</span><br>       container_name: es-node1<br>       <span class="hljs-comment">#restart: always</span><br>       volumes:<br>         - .<span class="hljs-regexp">/node1/</span>data:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data:rw<br>         - .<span class="hljs-regexp">/node1/</span>conf<span class="hljs-regexp">/elasticsearch.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml<br>         - .<span class="hljs-regexp">/node1/</span>logs:<span class="hljs-regexp">/user/</span>share<span class="hljs-regexp">/elasticsearch/</span>logs:rw<br>     es-node2:<br>       image:  elasticsearch:<span class="hljs-number">7.6</span>.<span class="hljs-number">0</span><br>       container_name: es-node2<br>       restart: always<br>       volumes:<br>        - .<span class="hljs-regexp">/node2/</span>data:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>data:rw<br>        - .<span class="hljs-regexp">/node2/</span>conf<span class="hljs-regexp">/elasticsearch.yml:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml<br>        - .<span class="hljs-regexp">/node2/</span>logs:<span class="hljs-regexp">/user/</span>share<span class="hljs-regexp">/elasticsearch/</span>logs:rw<br>     es-head:<br>       image: tobias74/elasticsearch-head:<span class="hljs-number">6</span><br>       container_name: es-head<br>       restart: always<br>       ports:<br>       - <span class="hljs-string">&quot;9100:9100&quot;</span><br></code></pre></td></tr></table></figure><p><code>master/conf/elasticsearch.yml</code> 文件内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">&quot;es-cluster&quot;</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">&quot;es-master&quot;</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9300</span><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;127.0.0.1:9300&quot;</span>]<br><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">cluster.initial_master_nodes :</span> [<span class="hljs-string">&quot;es-master&quot;</span>]<br><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-attr">xpack.security.audit.enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><code>node1/conf/elasticsearch.yml</code>  文件内容:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs groovy">cluster.<span class="hljs-attr">name:</span> <span class="hljs-string">&quot;es-cluster&quot;</span><br>node.<span class="hljs-attr">name:</span> <span class="hljs-string">&quot;es-node1&quot;</span><br>node.<span class="hljs-attr">master:</span> <span class="hljs-literal">false</span><br>node.<span class="hljs-attr">data:</span> <span class="hljs-literal">true</span><br>network.<span class="hljs-attr">host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>http.<span class="hljs-attr">port:</span> <span class="hljs-number">9201</span><br>transport.tcp.<span class="hljs-attr">port:</span> <span class="hljs-number">9301</span><br>cluster.<span class="hljs-attr">initial_master_nodes :</span> [<span class="hljs-string">&quot;es-master&quot;</span>]<br>discovery.<span class="hljs-attr">seed_hosts:</span> [<span class="hljs-string">&quot;127.0.0.1:9300&quot;</span>,<span class="hljs-string">&quot;127.0.0.1:9301&quot;</span>,<span class="hljs-string">&quot;127.0.0.1:9302&quot;</span>]<br><br>path.<span class="hljs-attr">logs:</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>logs<br><br>http.cors.<span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>http.cors.allow-<span class="hljs-attr">origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p><code>node2/conf/elasticsearch.yml</code>  文件内容:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs groovy">cluster.<span class="hljs-attr">name:</span> <span class="hljs-string">&quot;es-cluster&quot;</span><br>node.<span class="hljs-attr">name:</span> <span class="hljs-string">&quot;es-node2&quot;</span><br>node.<span class="hljs-attr">master:</span> <span class="hljs-literal">false</span><br>node.<span class="hljs-attr">data:</span> <span class="hljs-literal">true</span><br>network.<span class="hljs-attr">host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>http.<span class="hljs-attr">port:</span> <span class="hljs-number">9202</span><br>transport.tcp.<span class="hljs-attr">port:</span> <span class="hljs-number">9302</span><br>discovery.<span class="hljs-attr">seed_hosts:</span> [<span class="hljs-string">&quot;127.0.0.1:9300&quot;</span>,<span class="hljs-string">&quot;127.0.0.1:9301&quot;</span>,<span class="hljs-string">&quot;127.0.0.1:9302&quot;</span>]<br>cluster.<span class="hljs-attr">initial_master_nodes :</span> [<span class="hljs-string">&quot;es-master&quot;</span>]<br>path.<span class="hljs-attr">logs:</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>logs<br></code></pre></td></tr></table></figure><p><code>docker-compose up</code> 启动即可</p><h2 id="启动错误解决"><a href="#启动错误解决" class="headerlink" title="启动错误解决"></a>启动错误解决</h2><ol><li>docker以挂载配置文件启动elasticsearch的时候会报错误，所以需要给予文件夹权限<br>赋权命令：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod <span class="hljs-number">777</span> master<span class="hljs-regexp">/data/</span><br>chmod <span class="hljs-number">777</span> node1<span class="hljs-regexp">/data/</span><br>chmod <span class="hljs-number">777</span> node2<span class="hljs-regexp">/data/</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rocketMQ-环境搭建</title>
    <link href="/2021/01/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/docker/docker-compose/docker-compose-rocketMQ/"/>
    <url>/2021/01/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/docker/docker-compose/docker-compose-rocketMQ/</url>
    
    <content type="html"><![CDATA[<h2 id="rocketMQ环境搭建"><a href="#rocketMQ环境搭建" class="headerlink" title="rocketMQ环境搭建"></a>rocketMQ环境搭建</h2><p><code>git clone https://github.com/foxiswho/docker-rocketmq.git</code></p><p>切换分支<code>git checkout v4.4.0</code></p><p>该项目目录结构为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">docker-rocketmq</span>/<br>├── <span class="hljs-selector-tag">base</span><br>│   ├── <span class="hljs-selector-tag">Dockerfile</span><br>│   ├── <span class="hljs-selector-tag">readme</span><span class="hljs-selector-class">.md</span><br>│   └── <span class="hljs-selector-tag">scripts</span><br>│       ├── <span class="hljs-selector-tag">runbroker-customize</span><span class="hljs-selector-class">.sh</span><br>│       ├── <span class="hljs-selector-tag">runserver-customize</span><span class="hljs-selector-class">.sh</span><br>│       └── <span class="hljs-selector-tag">to_bytes</span><span class="hljs-selector-class">.gawk</span><br>├── <span class="hljs-selector-tag">broker</span><br>│   ├── <span class="hljs-selector-tag">Dockerfile</span><br>│   └── <span class="hljs-selector-tag">readme</span><span class="hljs-selector-class">.md</span><br>├── <span class="hljs-selector-tag">README</span><span class="hljs-selector-class">.md</span><br>├── <span class="hljs-selector-tag">rmq</span>   #进入此目录<br>│   ├── <span class="hljs-selector-tag">docker-compose</span><span class="hljs-selector-class">.yml</span><br>│   └── <span class="hljs-selector-tag">rmq</span><br>│       ├── <span class="hljs-selector-tag">brokerconf</span><br>│       │   └── <span class="hljs-selector-tag">broker</span><span class="hljs-selector-class">.conf</span><br>│       ├── <span class="hljs-selector-tag">logs</span><br>│       ├── <span class="hljs-selector-tag">readme</span><span class="hljs-selector-class">.md</span><br>│       └── <span class="hljs-selector-tag">store</span><br>└── <span class="hljs-selector-tag">server</span><br>    ├── <span class="hljs-selector-tag">Dockerfile</span><br>    └── <span class="hljs-selector-tag">readme</span><span class="hljs-selector-class">.md</span><br></code></pre></td></tr></table></figure><p>进入rmq目录下，执行<code>docker-compose up</code> 即可。</p><p>启动IP,如果 docker 报 <code>com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;192.168.0.120:10909&gt; failed</code>修改<br><code>broker.conf</code> 文件里brokerIP1设置为宿主ip即可</p>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zookeeper-环境搭建</title>
    <link href="/2021/01/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/docker/docker-compose/docker-compose-zk/"/>
    <url>/2021/01/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/docker/docker-compose/docker-compose-zk/</url>
    
    <content type="html"><![CDATA[<h2 id="zookeeper环境搭建"><a href="#zookeeper环境搭建" class="headerlink" title="zookeeper环境搭建"></a>zookeeper环境搭建</h2><p>新建文件docker-compose-zk.yml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs"><span class="hljs-attribute">version</span>: &#x27;3.1&#x27;<br><br><span class="hljs-attribute">services:</span><br>  zoo1:<br>    image: zookeeper<br>    restart: always<br>    hostname: zoo1<br>    ports:<br>      - 2181:2181<br>    environment:<br>      ZOO_MY_ID: 1<br>      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181<br><br>  zoo2:<br>    image: zookeeper<br>    restart: always<br>    hostname: zoo2<br>    ports:<br>      - 2182:2181<br>    environment:<br>      ZOO_MY_ID: 2<br>      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181 server.3=zoo3:2888:3888;2181<br><br>  zoo3:<br>    image: zookeeper<br>    restart: always<br>    hostname: zoo3<br>    ports:<br>      - 2183:2181<br>    environment:<br>      ZOO_MY_ID: 3<br>      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=0.0.0.0:2888:3888;2181<br></code></pre></td></tr></table></figure><p>在目录下执行<code>docker-compose -f docker-compose-zk.yml up -d</code></p>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux常见问题</title>
    <link href="/2021/01/04/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux/linux%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2021/01/04/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/linux/linux%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<ol><li><p><code>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code></p><p>解决：<code>sysctl -w vm.max_map_count=262144</code></p><p>重启虚拟机将失效<br>在<code>/etc/sysctl.conf</code>文件最后添加一行<br><code>vm.max_map_count=262144</code>即可永久修改</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>服务器</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-centos7</title>
    <link href="/2021/01/04/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/docker/docker-compose/docker-centos7/"/>
    <url>/2021/01/04/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/docker/docker-compose/docker-centos7/</url>
    
    <content type="html"><![CDATA[<h2 id="centos7安装docker"><a href="#centos7安装docker" class="headerlink" title="centos7安装docker"></a>centos7安装docker</h2><p>安装命令：<br><code>yum install -y docker </code></p><p>启动docker<br><code>systemctl start docker</code></p><p>设置docker开机启动<br><code>systemctl enable docker</code></p><p>##安装docker-compose</p><ol><li><p>添加EPEL源</p><p> <code>yum install -y epel-release</code></p></li><li><p>安装python-pip</p><p> <code>yum install -y python-pip</code></p></li><li><p>安装docker-compose</p><p> <code>pip install docker-compose</code></p></li></ol><p>##更换镜像源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">打开文件（没有就新建）<br>vim <span class="hljs-regexp">/etc/</span>docker/daemon.json<br><br>&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>]<br>&#125;<br>保存后重启即可<br>service docker restart<br><br>Docker中国区官方镜像<br>https:<span class="hljs-regexp">//</span>registry.docker-cn.com<br><br>网易<br>http:<span class="hljs-regexp">//</span>hub-mirror.c.<span class="hljs-number">163</span>.com<br><br>ustc <br>https:<span class="hljs-regexp">//</span>docker.mirrors.ustc.edu.cn<br><br>中国科技大学<br>https:<span class="hljs-regexp">//</span>docker.mirrors.ustc.edu.cn<br><br>阿里云容器服务(需要先创建容器镜像)<br>https:<span class="hljs-regexp">//</span>cr.console.aliyun.com/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-run</title>
    <link href="/2021/01/04/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/docker/docker-compose/docker-run/"/>
    <url>/2021/01/04/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%9C%8D%E5%8A%A1%E5%99%A8/docker/docker-compose/docker-run/</url>
    
    <content type="html"><![CDATA[<h2 id="docker-镜像"><a href="#docker-镜像" class="headerlink" title="docker 镜像"></a>docker 镜像</h2><p>修改<code>/etc/docker/daemon.json</code>（不存在就新建）</p><p><code>&quot;registry-mirrors&quot;: [&quot;https://sftc64t1.mirror.aliyuncs.com&quot;]</code></p><h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h2><p>安装命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros">streamsets<br>docker <span class="hljs-builtin-name">run</span> --restart on-failure -p 18630:18630 -d --name sdc streamsets/datacollector<br><br>pgsql<br>docker <span class="hljs-builtin-name">run</span> --name postgres -e <span class="hljs-attribute">POSTGRES_PASSWORD</span>=password -p 5432:5432 -d postgres:9.5.24-alpine<br><br>jenkins<br>docker <span class="hljs-builtin-name">run</span> <span class="hljs-attribute">--restart</span>=always --name jenkins -p 18080:8080 -p 50000:50000 -v /root/docker/jenkins:/var/jenkins_home  jenkins/jenkins:latest<br><br><br>bitwarden 安装命令：<br>docker <span class="hljs-builtin-name">run</span> \<br>-itd \<br>-e <span class="hljs-attribute">PGID</span>=1000 \<br>-e <span class="hljs-attribute">PUID</span>=1000 \<br><span class="hljs-attribute">--name</span>=<span class="hljs-string">&#x27;bitwardenrs&#x27;</span> \<br><span class="hljs-attribute">--net</span>=<span class="hljs-string">&#x27;你的自定义网络名称&#x27;</span> \<br>-e <span class="hljs-attribute">TZ</span>=<span class="hljs-string">&quot;Asia/Shanghai&quot;</span> \<br>-e <span class="hljs-string">&#x27;SERVER_ADMIN_EMAIL&#x27;</span>=<span class="hljs-string">&#x27;你的email&#x27;</span> \<br>-e <span class="hljs-string">&#x27;SIGNUPS_ALLOWED&#x27;</span>=<span class="hljs-string">&#x27;false&#x27;</span> \<br>-e <span class="hljs-string">&#x27;INVITATIONS_ALLOWED&#x27;</span>=<span class="hljs-string">&#x27;true&#x27;</span> \<br>-e <span class="hljs-string">&#x27;WEBSOCKET_ENABLED&#x27;</span>=<span class="hljs-string">&#x27;true&#x27;</span> \<br>-e <span class="hljs-string">&#x27;ADMIN_TOKEN&#x27;</span>=<span class="hljs-string">&#x27;你的token&#x27;</span> \<br>-p <span class="hljs-string">&#x27;8086:80/tcp&#x27;</span> \<br>-v <span class="hljs-string">&#x27;/opt/docker/appdata/bitwarden&#x27;</span>:<span class="hljs-string">&#x27;/data&#x27;</span>:<span class="hljs-string">&#x27;rw&#x27;</span> <span class="hljs-string">&#x27;bitwardenrs/server:latest&#x27;</span><br><br>token生成命令： openssl rand -base64 48<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7安装MySQL</title>
    <link href="/2021/01/03/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/centos7%E5%AE%89%E8%A3%85MySQL/"/>
    <url>/2021/01/03/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/centos7%E5%AE%89%E8%A3%85MySQL/</url>
    
    <content type="html"><![CDATA[<h2 id="centos7安装MySQL"><a href="#centos7安装MySQL" class="headerlink" title="centos7安装MySQL"></a>centos7安装MySQL</h2><ol><li><p>配置YUM源</p><p> <code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code></p><p> <code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p><p> <code>yum repolist enabled | grep &quot;mysql.*-community.*&quot;</code></p><p> 可以修改<code>vim /etc/yum.repos.d/mysql-community.repo</code>源，改变默认安装的mysql版本。比如要安装5.6版本，将5.7源的enabled=1改成enabled=0。然后再将5.6源的enabled=0改成enabled=1即可。</p></li><li><p>安装MySQL</p><p> <code>yum install mysql-community-server</code></p></li><li><p>启动MySQL服务</p><p> <code>service mysqld start</code></p></li><li><p>开机启动</p><p> <code>systemctl enable mysqld</code></p><p> <code>systemctl daemon-reload</code></p></li><li><p>修改root本地登录密码</p><p> <code>grep &#39;temporary password&#39; /var/log/mysqld.log   ---AkY&gt;ts#9)Dcv</code></p><p> <code>mysql -uroot -p</code></p><p> <code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;a1b2c3d4&#39;; </code></p><p> 修改密码策略</p><p> 在<code>/etc/my.cnf</code>文件添加validate_password_policy配置，指定密码策略<br>选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件<br>validate_password_policy=0</p><p> 如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可：<br><code>validate_password = off</code></p></li><li><p>添加远程登录用户</p><p> 默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：<br> mysql&gt; <code>GRANT ALL PRIVILEGES ON *.* TO &#39;mysql&#39;@&#39;%&#39; IDENTIFIED BY &#39;mysql123&#39; WITH GRANT OPTION;</code></p><p> 设置root用户远程登录</p><pre><code> use mysql; update user set host = &#39;%&#39; where user = &#39;root&#39;; FLUSH PRIVILEGES;</code></pre></li><li><p>配置默认编码为utf8</p><p> 修改<code>/etc/my.cnf</code>配置文件，在[mysqld]下添加编码配置，如下所示：</p><p> [mysqld]</p><p> character_set_server=utf8</p><p> init_connect=’SET NAMES utf8’</p></li><li><p>不区分大小写</p><p> 在<code>[mysqld]</code>下加上<code>lower_case_table_names=1</code></p></li><li><p>mysql重启服务</p><p> <code>service mysqld restart</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hive-常用的DDL语法</title>
    <link href="/2020/11/07/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive/Hive-%E5%B8%B8%E7%94%A8%E7%9A%84DDL%E8%AF%AD%E6%B3%95/"/>
    <url>/2020/11/07/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive/Hive-%E5%B8%B8%E7%94%A8%E7%9A%84DDL%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Hive-DDL"><a href="#Hive-DDL" class="headerlink" title="Hive DDL"></a>Hive DDL</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p><code>create database hive_test comment &#39;测试数据库&#39; location &#39;/home/hadoop/data&#39;;</code></p><h3 id="显示数据库信息-EXTENDED-表示是否显示额外属性"><a href="#显示数据库信息-EXTENDED-表示是否显示额外属性" class="headerlink" title="显示数据库信息 EXTENDED 表示是否显示额外属性"></a>显示数据库信息 EXTENDED 表示是否显示额外属性</h3><p><code>desc database extended hive_test;</code></p><h3 id="删除数据库信息"><a href="#删除数据库信息" class="headerlink" title="删除数据库信息"></a>删除数据库信息</h3><p><code>DROP (DATABASE|SCHEMA) [IF EXISTS] database_name [RESTRICT|CASCADE];</code></p><ul><li>默认行为是 RESTRICT，如果数据库中存在表则删除失败。要想删除库及其中的表，可以使用 CASCADE 级联删除。</li></ul><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">TEMPORARY</span>] [<span class="hljs-keyword">EXTERNAL</span>] <span class="hljs-keyword">TABLE</span> [<span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db_name.]table_name     <span class="hljs-comment">--表名</span><br>  [(col_name data_type [<span class="hljs-keyword">COMMENT</span> col_comment],<br>    ... [constraint_specification])]  <span class="hljs-comment">--列名 列数据类型</span><br>  [<span class="hljs-keyword">COMMENT</span> table_comment]   <span class="hljs-comment">--表描述</span><br>  [PARTITIONED <span class="hljs-keyword">BY</span> (col_name data_type [<span class="hljs-keyword">COMMENT</span> col_comment], ...)]  <span class="hljs-comment">--分区表分区规则</span><br>  [<br>    CLUSTERED <span class="hljs-keyword">BY</span> (col_name, col_name, ...)<br>   [SORTED <span class="hljs-keyword">BY</span> (col_name [<span class="hljs-keyword">ASC</span>|<span class="hljs-keyword">DESC</span>], ...)] <span class="hljs-keyword">INTO</span> num_buckets BUCKETS<br>  ]  <span class="hljs-comment">--分桶表分桶规则</span><br>  [SKEWED <span class="hljs-keyword">BY</span> (col_name, col_name, ...) <span class="hljs-keyword">ON</span> ((col_value, col_value, ...), (col_value, col_value, ...), ...)<br>   [<span class="hljs-keyword">STORED</span> <span class="hljs-keyword">AS</span> DIRECTORIES]<br>  ]  <span class="hljs-comment">--指定倾斜列和值</span><br>  [<br>   [<span class="hljs-keyword">ROW</span> <span class="hljs-keyword">FORMAT</span> row_format]<br>   [<span class="hljs-keyword">STORED</span> <span class="hljs-keyword">AS</span> file_format]<br>     | <span class="hljs-keyword">STORED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;storage.handler.class.name&#x27;</span> [<span class="hljs-keyword">WITH</span> SERDEPROPERTIES (...)]<br>  ]  <span class="hljs-comment">-- 指定行分隔符、存储文件格式或采用自定义存储格式</span><br>  [LOCATION hdfs_path]  <span class="hljs-comment">-- 指定表的存储位置</span><br>  [TBLPROPERTIES (property_name=property_value, ...)]  <span class="hljs-comment">--指定表的属性</span><br>  [<span class="hljs-keyword">AS</span> select_statement];   <span class="hljs-comment">--从查询结果创建表</span><br></code></pre></td></tr></table></figure><h4 id="创建内部表"><a href="#创建内部表" class="headerlink" title="创建内部表"></a>创建内部表</h4><p><code>create table hive_test1.test_hive(id int,name string) comment &#39;测试表&#39; row format delimited fields terminated by &quot;\t&quot;;</code></p><h4 id="创建外部表"><a href="#创建外部表" class="headerlink" title="创建外部表"></a>创建外部表</h4><p><code>create external table hive_test1.test_hive2(id int,name string) comment &#39;测试表&#39; row format delimited fields terminated by &#39;\t&#39; location &#39;/hadoop/ext&#39;;</code></p><h4 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h4><p><code>create external table hive_test1.testhive3(id int, name string) comment &#39;测试表&#39; partitioned by (user_no string) row format delimited fields terminated by &#39;\t&#39; location &#39;/home/hadoop/hive_test1/testhive3&#39;;</code></p><h4 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h4><p><code>create external table hive_test1.testhive4(id int, name STRING) comment &#39;分桶表&#39; clustered by (id) sorted by (id asc) into 4 buckets row format delimited fields terminated by &#39;\t&#39; location &#39;/home/hadoop/hive_test1/test_hive4&#39;;</code></p><h4 id="倾斜表"><a href="#倾斜表" class="headerlink" title="倾斜表"></a>倾斜表</h4><ul><li>通过指定一个或者多个列经常出现的值（严重偏斜），Hive 会自动将涉及到这些值的数据拆分为单独的文件。在查询时，如果涉及到倾斜值，它就直接从独立文件中获取数据，而不是扫描所有文件，这使得性能得到提升。</li></ul><p><code>create external table hive_test1.test_hive5(id int,name STRING) comment &#39;倾斜表&#39; skewed by (id ) on (1,2,3) row format delimited fields terminated by &#39;\t&#39; location &#39;/home/hadoop/hive_test1/test_hive5&#39;;</code></p><h4 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h4><ul><li>临时表仅对当前 session 可见，临时表的数据将存储在用户的暂存目录中，并在会话结束后删除。如果临时表与永久表表名相同，则对该表名的任何引用都将解析为临时表，而不是永久表。临时表还具有以下两个限制：</li><li>不支持分区列</li><li>不支持创建索引</li></ul><p><code>create temporary table hive_test1.test_hive6(id int,name STRING) row format delimited fields terminated by &#39;\t&#39; ;</code></p><h4 id="CTAS创建表"><a href="#CTAS创建表" class="headerlink" title="CTAS创建表"></a>CTAS创建表</h4><p><code>create table test_hive7 as SELECT * FROM emp WHERE deptno=&#39;20&#39;;</code></p><h3 id="复制表结构"><a href="#复制表结构" class="headerlink" title="复制表结构"></a>复制表结构</h3><p><code>CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS] [db_name.]table_name  --创建表表名 --    LIKE existing_table_or_view_name  --被复制表的表名 --    [LOCATION hdfs_path]; --存储位置 create temporary external table if not exists hive_test1.test_hive3_copy like hive_test1.test_hive2 location &#39;/home/hadoop/hive_test1/copy/test_hive3_copy&#39;;</code></p><h3 id="加载数据到表"><a href="#加载数据到表" class="headerlink" title="加载数据到表"></a>加载数据到表</h3><p><code>load data local inpath &#39;/home/hadoop/data/a.txt&#39; into table hive_test1.test_hive; select * from hive_test1.test_hive;</code></p><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><p><code>ALTER TABLE table_name RENAME TO new_table_name;</code></p><h3 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h3><p><code>ALTER TABLE table_name [PARTITION partition_spec] CHANGE [COLUMN] col_old_name col_new_name column_type --   [COMMENT col_comment] [FIRST|AFTER column_name] [CASCADE|RESTRICT];</code></p><h3 id="新增列"><a href="#新增列" class="headerlink" title="新增列"></a>新增列</h3><p><code>ALTER TABLE emp_temp ADD COLUMNS (address STRING COMMENT &#39;home address&#39;);</code></p><h3 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h3><ul><li>清空整个表或表指定分区中的数据</li></ul><p><code>TRUNCATE TABLE table_name [PARTITION (partition_column = partition_col_value,  ...)];</code></p><ul><li>目前只有内部表才能执行 TRUNCATE 操作，外部表执行时会抛出异常 Cannot truncate non-managed table XXXX。</li></ul><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p><code>DROP TABLE [IF EXISTS] table_name [PURGE];</code></p><ul><li>内部表：不仅会删除表的元数据，同时会删除 HDFS 上的数据；</li><li>外部表：只会删除表的元数据，不会删除 HDFS 上的数据；</li><li>删除视图引用的表时，不会给出警告（但视图已经无效了，必须由用户删除或重新创建）</li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="Describe-查看数据库"><a href="#Describe-查看数据库" class="headerlink" title="Describe 查看数据库"></a>Describe 查看数据库</h4><p><code>DESCRIBE|Desc DATABASE [EXTENDED] db_name;  --EXTENDED 是否显示额外属性</code></p><h4 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h4><p><code>DESCRIBE|Desc [EXTENDED|FORMATTED] table_name --FORMATTED 以友好的展现方式查看表详情</code></p><h4 id="Show-查看数据库列表"><a href="#Show-查看数据库列表" class="headerlink" title="Show 查看数据库列表"></a>Show 查看数据库列表</h4><p><code>SHOW (DATABASES|SCHEMAS) [LIKE &#39;identifier_with_wildcards&#39;];</code><br>– LIKE 子句允许使用正则表达式进行过滤，但是 SHOW 语句当中的 LIKE 子句只支持 *（通配符）和 |（条件或）两个符号。例如 employees，emp *，emp * | * ees，所有这些都将匹配名为 employees 的数据库。</p><h4 id="查看表的列表"><a href="#查看表的列表" class="headerlink" title="查看表的列表"></a>查看表的列表</h4><p><code>SHOW TABLES [IN database_name] [&#39;identifier_with_wildcards&#39;];</code></p><h4 id="查看视图列表"><a href="#查看视图列表" class="headerlink" title="查看视图列表"></a>查看视图列表</h4><p><code>SHOW VIEWS [IN/FROM database_name] [LIKE &#39;pattern_with_wildcards&#39;];</code>   –仅支持 Hive 2.2.0 +</p><h4 id="查看表的分区列表"><a href="#查看表的分区列表" class="headerlink" title="查看表的分区列表"></a>查看表的分区列表</h4><p><code>SHOW PARTITIONS table_name;</code></p><h4 id="查看表-视图的创建语句"><a href="#查看表-视图的创建语句" class="headerlink" title="查看表/视图的创建语句"></a>查看表/视图的创建语句</h4><p><code>SHOW CREATE TABLE ([db_name.]table_name|view_name);</code></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>Hive</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop-07 文件系统工作原理漫画</title>
    <link href="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-07%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BC%AB%E7%94%BB/"/>
    <url>/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-07%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BC%AB%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-07%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BC%AB%E7%94%BB/1" class><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-07%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BC%AB%E7%94%BB/2" class><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-07%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BC%AB%E7%94%BB/3" class><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-07%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BC%AB%E7%94%BB/4" class><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-07%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%BC%AB%E7%94%BB/5" class>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop-06 other</title>
    <link href="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-06%20other/"/>
    <url>/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-06%20other/</url>
    
    <content type="html"><![CDATA[<h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><p>hadoop 数据存储过程</p><p>client 客户端</p><p>namenode</p><p>datanodes</p><p>InputFormat：将我们输入的数据进行分片(split):</p><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-06%20other/%E7%A6%BB%E7%BA%BF%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%9E%B6%E6%9E%84.png" class title="离线数据处理架构">]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop-05 MapReduce</title>
    <link href="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-05%20MapReduce/"/>
    <url>/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-05%20MapReduce/</url>
    
    <content type="html"><![CDATA[<h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><h3 id="旧的MapReduce的架构："><a href="#旧的MapReduce的架构：" class="headerlink" title="旧的MapReduce的架构："></a>旧的MapReduce的架构：</h3><p><strong>一种分布式的计算方式指定一个Map（映射）函数，用来把一组键值对映射成一组新的键值对，指定并发的Reduce（规约）函数，用来保证所有映射对中的每一个共享相同的键组。</strong></p><p>如图：</p><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-05%20MapReduce/mapreduce-pattern.png" class><p>map: (K1, V1) → list(K2, V2) combine: (K2, list(V2)) → list(K2, V2) reduce: (K2, list(V2)) → list(K3, V3)</p><p>Map输出格式和Reduce输入格式一定是相同的</p><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p>MapReduce主要是先读取文件数据，然后进行Map处理，接着Reduce处理，最后把处理结果写到文件中。</p><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-05%20MapReduce/mapreduce-process-overview.png" class><h3 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h3><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-05%20MapReduce/mapreduce-process.png" class><h3 id="多节点下的流程"><a href="#多节点下的流程" class="headerlink" title="多节点下的流程"></a>多节点下的流程</h3><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-05%20MapReduce/mapreduce-process-cluster.png" class><h3 id="主要过程"><a href="#主要过程" class="headerlink" title="主要过程"></a>主要过程</h3><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-05%20MapReduce/mapreduce-data-process.png" class><h3 id="Map-Side"><a href="#Map-Side" class="headerlink" title="Map Side"></a>Map Side</h3><h4 id="Record-reader"><a href="#Record-reader" class="headerlink" title="Record reader"></a>Record reader</h4><p>记录阅读器会翻译由输入格式生成的记录，记录阅读器用于将数据解析给记录，并不分析记录自身。记录读取器的目的是将数据解析成记录，但不分析记录本身。它将数据以键值树的形式传输给mapper，通常是位置信息，值是构成记录的数据存储块，自定义记录不在本文讨论范围之内。</p><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>在映射器中用户提供的代称为中间对。对于键值的具体定义是慎重的，因为定义对于分布式任务的完成具有重要意义。键决定了数据分类的依据，而值决定了处理器中的分析信息。</p><p>Shuffle and Sort</p><p>reduce任务以随机和排序的步骤开始，此步骤写入输出文件并下载到本地计算机，这些数据采用键进行排序以把等价密钥组合到一起。</p><h4 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h4><p>reduce采用分组数据作为输入，该功能传递键和此键相关值的迭代器。可以采用多种方式来汇总、过滤或者合并数据。当reduce功能完成，就会发送0个或多个键值对。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出格式会转换最终的键值对并写人文件。默认情况下键和值以tab分割，各记录以换行符分割。因此可以自定义更多输出格式，最终数据会写入HDFS。</p><h3 id="MapReude-读取数据"><a href="#MapReude-读取数据" class="headerlink" title="MapReude - 读取数据"></a>MapReude - 读取数据</h3><p>通过InputFormat决定读取的数据类型，然后拆分成一个个InputSplit，每个InputSplit对应一个Map处理，RecordReader读取InputSplit的内容给Map。</p><h4 id="InputFormat"><a href="#InputFormat" class="headerlink" title="InputFormat"></a>InputFormat</h4><p>决定读取数据的格式，可以是文件或者数据库等。</p><p>功能：</p><ol><li>验证作业输入的正确性，如格式等。</li><li>将输入文件切割成逻辑分片（InputSplit），一个InputSplit将会被分配给一个独立的Map任务。</li><li>提供RecordReader实现，读取InputSplit中“K-V”对供Mapper使用。</li></ol><p>方法：</p><p>List getSplits()：获取由输入文件计算出输入分片(InputSplit)，解决数据或文件分割成片问题。</p><p>RecordReader createRecordReader(): 创建RecordReader，从InputSplit中读取数据，解决读取分片中的数据问题。</p><h4 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h4><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-05%20MapReduce/mapreduce-inputformat.png" class><ul><li>TextInputFormat: 输入文件中的每一行就是一个记录，Key是这一行的byte offset，而value是这一行的内容</li><li>KeyValueTextInputFormat: 输入文件中每一行就是一个记录，第一个分隔符字符切分每行。在分隔符字符之前的内容为Key，在之后的为Value。分隔符变量通过key.value.separator.in.input.line变量设置，默认为(\t)字符。</li><li>NLineInputFormat: 与TextInputFormat一样，但每个数据块必须保证有且只有Ｎ行，mapred.line.input.format.linespermap属性，默认为１</li><li>SequenceFileInputFormat: 一个用来读取字符流数据的InputFormat，&lt;key,value&gt;为用户自定义的。字符流数据是Hadoop自定义的压缩的二进制数据格式。它用来优化从一个MapReduce任务的输出到另一个MapReduce任务的输入之间的数据传输过程。&lt;/key,value&gt;</li></ul><h3 id="InputSplit"><a href="#InputSplit" class="headerlink" title="InputSplit"></a>InputSplit</h3><p>代表一个个逻辑分片，并没有真正存储数据，只是提供了一个如何将数据分片的方法</p><p>Split内有Location信息，利于数据局部化</p><p>一个InputSplit给一个单独的Map处理</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InputSplit</span> &#123;</span><br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * 获取Split的大小，支持根据size对InputSplit排序.</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">long</span> getLength() <span class="hljs-keyword">throws</span> IOException, InterruptedException;<br><br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * 获取存储该分片的数据所在的节点位置.</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String[] getLocations() <span class="hljs-keyword">throws</span> IOException, InterruptedException;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RecordReader"><a href="#RecordReader" class="headerlink" title="RecordReader"></a>RecordReader</h3><p>将InputSplit拆分成一个个&lt;key,value&gt;对给Map处理，也是实际的文件读取分隔对象&lt;/key,value&gt;</p><p>问题</p><h4 id="大量小文件如何处理"><a href="#大量小文件如何处理" class="headerlink" title="大量小文件如何处理"></a>大量小文件如何处理</h4><p>CombineFileInputFormat可以将若干个Split打包成一个，目的是避免过多的Map任务（因为Split的数目决定了Map的数目，大量的Mapper Task创建销毁开销将是巨大的）</p><h4 id="怎么计算split的"><a href="#怎么计算split的" class="headerlink" title="怎么计算split的"></a>怎么计算split的</h4><p>通常一个split就是一个block（FileInputFormat仅仅拆分比block大的文件），这样做的好处是使得Map可以在存储有当前数据的节点上运行本地的任务，而不需要通过网络进行跨节点的任务调度</p><p>通过mapred.min.split.size， mapred.max.split.size, block.size来控制拆分的大小</p><p>如果mapred.min.split.size大于block size，则会将两个block合成到一个split，这样有部分block数据需要通过网络读取</p><p>如果mapred.max.split.size小于block size，则会将一个block拆成多个split，增加了Map任务数（Map对split进行计算并且上报结果，关闭当前计算打开新的split均需要耗费资源）</p><p>先获取文件在HDFS上的路径和Block信息，然后根据splitSize对文件进行切分（ splitSize = computeSplitSize(blockSize, minSize, maxSize) ），默认splitSize 就等于blockSize的默认值（64m）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public List&lt;InputSplit&gt; get<span class="hljs-constructor">Splits(JobContext <span class="hljs-params">job</span>)</span> throws IOException &#123;<br>    <span class="hljs-comment">// 首先计算分片的最大和最小值。这两个值将会用来计算分片的大小</span><br>    long minSize = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>max(get<span class="hljs-constructor">FormatMinSplitSize()</span>, get<span class="hljs-constructor">MinSplitSize(<span class="hljs-params">job</span>)</span>);<br>    long maxSize = get<span class="hljs-constructor">MaxSplitSize(<span class="hljs-params">job</span>)</span>;<br><br>    <span class="hljs-comment">// generate splits</span><br>    List&lt;InputSplit&gt; splits = <span class="hljs-keyword">new</span> ArrayList&lt;InputSplit&gt;<span class="hljs-literal">()</span>;<br>    List&lt;FileStatus&gt; files = <span class="hljs-built_in">list</span><span class="hljs-constructor">Status(<span class="hljs-params">job</span>)</span>;<br>    <span class="hljs-keyword">for</span> (FileStatus file: files) &#123;<br>        Path path = file.get<span class="hljs-constructor">Path()</span>;<br>        long length = file.get<span class="hljs-constructor">Len()</span>;<br>        <span class="hljs-keyword">if</span> (length != <span class="hljs-number">0</span>) &#123;<br>              FileSystem fs = path.get<span class="hljs-constructor">FileSystem(<span class="hljs-params">job</span>.<span class="hljs-params">getConfiguration</span>()</span>);<br>            <span class="hljs-comment">// 获取该文件所有的block信息列表[hostname, offset, length]</span><br>              BlockLocation<span class="hljs-literal">[]</span> blkLocations = fs.get<span class="hljs-constructor">FileBlockLocations(<span class="hljs-params">file</span>, 0, <span class="hljs-params">length</span>)</span>;<br>            <span class="hljs-comment">// 判断文件是否可分割，通常是可分割的，但如果文件是压缩的，将不可分割</span><br>              <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Splitable(<span class="hljs-params">job</span>, <span class="hljs-params">path</span>)</span>) &#123;<br>                long blockSize = file.get<span class="hljs-constructor">BlockSize()</span>;<br>                <span class="hljs-comment">// 计算分片大小</span><br>                <span class="hljs-comment">// 即 Math.max(minSize, Math.min(maxSize, blockSize));</span><br>                long splitSize = compute<span class="hljs-constructor">SplitSize(<span class="hljs-params">blockSize</span>, <span class="hljs-params">minSize</span>, <span class="hljs-params">maxSize</span>)</span>;<br><br>                long bytesRemaining = length;<br>                <span class="hljs-comment">// 循环分片。</span><br>                <span class="hljs-comment">// 当剩余数据与分片大小比值大于Split_Slop时，继续分片， 小于等于时，停止分片</span><br>                <span class="hljs-keyword">while</span> (((double) bytesRemaining)/splitSize &gt; SPLIT_SLOP) &#123;<br>                      <span class="hljs-built_in">int</span> blkIndex = get<span class="hljs-constructor">BlockIndex(<span class="hljs-params">blkLocations</span>, <span class="hljs-params">length</span>-<span class="hljs-params">bytesRemaining</span>)</span>;<br>                      splits.add(make<span class="hljs-constructor">Split(<span class="hljs-params">path</span>, <span class="hljs-params">length</span>-<span class="hljs-params">bytesRemaining</span>, <span class="hljs-params">splitSize</span>, <span class="hljs-params">blkLocations</span>[<span class="hljs-params">blkIndex</span>].<span class="hljs-params">getHosts</span>()</span>));<br>                      bytesRemaining -= splitSize;<br>                &#125;<br>                <span class="hljs-comment">// 处理余下的数据</span><br>                <span class="hljs-keyword">if</span> (bytesRemaining != <span class="hljs-number">0</span>) &#123;<br>                    splits.add(make<span class="hljs-constructor">Split(<span class="hljs-params">path</span>, <span class="hljs-params">length</span>-<span class="hljs-params">bytesRemaining</span>, <span class="hljs-params">bytesRemaining</span>, <span class="hljs-params">blkLocations</span>[<span class="hljs-params">blkLocations</span>.<span class="hljs-params">length</span>-1].<span class="hljs-params">getHosts</span>()</span>));<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 不可split，整块返回</span><br>                splits.add(make<span class="hljs-constructor">Split(<span class="hljs-params">path</span>, 0, <span class="hljs-params">length</span>, <span class="hljs-params">blkLocations</span>[0].<span class="hljs-params">getHosts</span>()</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 对于长度为0的文件，创建空Hosts列表，返回</span><br>            splits.add(make<span class="hljs-constructor">Split(<span class="hljs-params">path</span>, 0, <span class="hljs-params">length</span>, <span class="hljs-params">new</span> String[0])</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 设置输入文件数量</span><br>    job.get<span class="hljs-constructor">Configuration()</span>.set<span class="hljs-constructor">Long(NUM_INPUT_FILES, <span class="hljs-params">files</span>.<span class="hljs-params">size</span>()</span>);<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LOG</span>.</span></span>debug(<span class="hljs-string">&quot;Total # of splits: &quot;</span> + splits.size<span class="hljs-literal">()</span>);<br>    return splits;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分片间的数据如何处理"><a href="#分片间的数据如何处理" class="headerlink" title="分片间的数据如何处理"></a>分片间的数据如何处理</h2><p>split是根据文件大小分割的，而一般处理是根据分隔符进行分割的，这样势必存在一条记录横跨两个split</p><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-05%20MapReduce/mapreduce-split.png" class><p>解决办法是只要不是第一个split，都会远程读取一条记录。不是第一个split的都忽略到第一条记录</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> class LineRecordReader extends RecordReader&lt;LongWritable, Text&gt; &#123;<br>    <span class="hljs-keyword">private</span> CompressionCodecFactory compressionCodecs = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> start;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> pos;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> end;<br>    <span class="hljs-keyword">private</span> LineReader in;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> maxLineLength;<br>    <span class="hljs-keyword">private</span> LongWritable <span class="hljs-built_in">key</span> = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">private</span> Text value = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">// initialize函数即对LineRecordReader的一个初始化</span><br>    <span class="hljs-comment">// 主要是计算分片的始末位置，打开输入流以供读取K-V对，处理分片经过压缩的情况等</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> initialize(InputSplit genericSplit, TaskAttemptContext context) <span class="hljs-keyword">throws</span> IOException &#123;<br>        FileSplit <span class="hljs-built_in">split</span> = (FileSplit) genericSplit;<br>        Configuration job = context.getConfiguration();<br>        <span class="hljs-keyword">this</span>.maxLineLength = job.getInt(<span class="hljs-string">&quot;mapred.linerecordreader.maxlength&quot;</span>, Integer.MAX_VALUE);<br>        start = <span class="hljs-built_in">split</span>.getStart();<br>        end = start + <span class="hljs-built_in">split</span>.getLength();<br>        <span class="hljs-keyword">final</span> Path file = <span class="hljs-built_in">split</span>.getPath();<br>        compressionCodecs = <span class="hljs-keyword">new</span> CompressionCodecFactory(job);<br>        <span class="hljs-keyword">final</span> CompressionCodec codec = compressionCodecs.getCodec(file);<br><br>        <span class="hljs-comment">// 打开文件，并定位到分片读取的起始位置</span><br>        FileSystem fs = file.getFileSystem(job);<br>        FSDataInputStream fileIn = fs.<span class="hljs-built_in">open</span>(<span class="hljs-built_in">split</span>.getPath());<br><br>        <span class="hljs-built_in">boolean</span> skipFirstLine = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span> (codec != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 文件是压缩文件的话，直接打开文件</span><br>            in = <span class="hljs-keyword">new</span> LineReader(codec.createInputStream(fileIn), job);<br>            end = Long.MAX_VALUE;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 只要不是第一个split，则忽略本split的第一行数据</span><br>            <span class="hljs-keyword">if</span> (start != <span class="hljs-number">0</span>) &#123;<br>                skipFirstLine = <span class="hljs-keyword">true</span>;<br>                --start;<br>                <span class="hljs-comment">// 定位到偏移位置，下次读取就会从偏移位置开始</span><br>                fileIn.seek(start);<br>            &#125;<br>            in = <span class="hljs-keyword">new</span> LineReader(fileIn, job);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (skipFirstLine) &#123;<br>            <span class="hljs-comment">// 忽略第一行数据，重新定位start</span><br>            start += in.readLine(<span class="hljs-keyword">new</span> Text(), <span class="hljs-number">0</span>, (<span class="hljs-built_in">int</span>) Math.<span class="hljs-built_in">min</span>((<span class="hljs-keyword">long</span>) Integer.MAX_VALUE, end - start));<br>        &#125;<br>        <span class="hljs-keyword">this</span>.pos = start;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> nextKeyValue() <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">key</span> == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-built_in">key</span> = <span class="hljs-keyword">new</span> LongWritable();<br>        &#125;<br>        <span class="hljs-built_in">key</span>.<span class="hljs-built_in">set</span>(pos);<span class="hljs-comment">// key即为偏移量</span><br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span>) &#123;<br>            value = <span class="hljs-keyword">new</span> Text();<br>        &#125;<br>        <span class="hljs-built_in">int</span> newSize = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (pos &lt; end) &#123;<br>            newSize = in.readLine(value, maxLineLength,    Math.<span class="hljs-built_in">max</span>((<span class="hljs-built_in">int</span>) Math.<span class="hljs-built_in">min</span>(Integer.MAX_VALUE, end - pos), maxLineLength));<br>            <span class="hljs-comment">// 读取的数据长度为0，则说明已读完</span><br>            <span class="hljs-keyword">if</span> (newSize == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            pos += newSize;<br>            <span class="hljs-comment">// 读取的数据长度小于最大行长度，也说明已读取完毕</span><br>            <span class="hljs-keyword">if</span> (newSize &lt; maxLineLength) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 执行到此处，说明该行数据没读完，继续读入</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (newSize == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">key</span> = <span class="hljs-keyword">null</span>;<br>            value = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="MapReduce-Mapper"><a href="#MapReduce-Mapper" class="headerlink" title="MapReduce - Mapper"></a>MapReduce - Mapper</h2><p>主要是读取InputSplit的每一个Key,Value对并进行处理</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Mapper</span>&lt;<span class="hljs-symbol">KEYIN, <span class="hljs-symbol">VALUEIN</span>, <span class="hljs-symbol">KEYOUT</span>, <span class="hljs-symbol">VALUEOUT</span></span>&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 预处理，仅在map task启动时运行一次</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> setup(Context context) throws  IOException, InterruptedException &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对于InputSplit中的每一对&lt;key, value&gt;都会运行一次</span><br><span class="hljs-comment">     */</span><br>    @SuppressWarnings(<span class="hljs-string">&quot;unchecked&quot;</span>)<br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> map(KEYIN key, VALUEIN value, Context context) throws IOException, InterruptedException &#123;<br>        context.write((KEYOUT) key, (VALUEOUT) value);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扫尾工作，比如关闭流等</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> cleanup(Context context) throws IOException, InterruptedException &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * map task的驱动器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> run(Context context) throws IOException, InterruptedException &#123;<br>        setup(context);<br>        <span class="hljs-keyword">while</span> (context.nextKeyValue()) &#123;<br>            map(context.getCurrentKey(), context.getCurrentValue(), context);<br>        &#125;<br>        cleanup(context);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">MapContext</span>&lt;<span class="hljs-symbol">KEYIN, <span class="hljs-symbol">VALUEIN</span>, <span class="hljs-symbol">KEYOUT</span>, <span class="hljs-symbol">VALUEOUT</span></span>&gt; <span class="hljs-symbol">extends</span> <span class="hljs-symbol">TaskInputOutputContext</span>&lt;<span class="hljs-symbol">KEYIN, <span class="hljs-symbol">VALUEIN</span>, <span class="hljs-symbol">KEYOUT</span>, <span class="hljs-symbol">VALUEOUT</span></span>&gt; &#123;<br>    <span class="hljs-keyword">private</span> RecordReader&lt;KEYIN, VALUEIN&gt; reader;<br>    <span class="hljs-keyword">private</span> InputSplit split;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Get the input split for this map.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> InputSplit getInputSplit() &#123;<br>        <span class="hljs-keyword">return</span> split;<br>    &#125;<br><br>    @Override<br>    <span class="hljs-keyword">public</span> KEYIN getCurrentKey() throws IOException, InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> reader.getCurrentKey();<br>    &#125;<br><br>    @Override<br>    <span class="hljs-keyword">public</span> VALUEIN getCurrentValue() throws IOException, InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> reader.getCurrentValue();<br>    &#125;<br><br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span>ean nextKeyValue() throws IOException, InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> reader.nextKeyValue();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="MapReduce-Shuffle"><a href="#MapReduce-Shuffle" class="headerlink" title="MapReduce - Shuffle"></a>MapReduce - Shuffle</h2><p>对Map的结果进行排序并传输到Reduce进行处理Map的结果并不是直接存放在硬盘，而是利用缓存做一些与排序处理Map会调用Combiner，压缩，按key进行分区，排序等。尽量减少结果的大小每个Map完成后都会通知Task，然后Reduce就可以进行处理。</p><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-05%20MapReduce/mapreduce-process.png" class><h4 id="Map端"><a href="#Map端" class="headerlink" title="Map端"></a>Map端</h4><ol><li>当Map程序开始产生结果的时候，并不是直接写到文件的，而是利用缓存做一些排序方面的预处理操作</li><li>每个Map任务都有一个循环内存缓冲区（默认100MB），当缓存的内容达到80%时，后台线程开始将内容写到文件，此时Map任务可以继续输出结果，但如果缓冲区满了，Map任务则需要等待</li><li>写文件使用round-robin方式。在写入文件之前，先将数据按照Reduce进行分区。对于每一个分区，都会在内存中根据key进行排序，如果配置了Combiner，则排序后执行Combiner（Combine之后可以减少写入文件和传输的数据）</li><li>每次结果达到缓冲区的阀值时，都会创建一个文件，在Map结束时，可能会产生大量的文件。在Map完成前，会将这些文件进行合并和排序。如果文件的数量超过3个，则合并后会再次运行Combiner（1、2个文件就没有必要了）</li><li>如果配置了压缩，则最终写入的文件会先进行压缩，这样可以减少写入和传输的数据</li><li>一旦Map完成，则通知任务管理器，此时Reduce就可以开始复制结果数据<h4 id="Reduce端"><a href="#Reduce端" class="headerlink" title="Reduce端"></a>Reduce端</h4></li><li>Map的结果文件都存放到运行Map任务的机器的本地硬盘中</li><li>如果Map的结果很少，则直接放到内存，否则写入文件中</li><li>同时后台线程将这些文件进行合并和排序到一个更大的文件中（如果文件是压缩的，则需要先解压）</li><li>当所有的Map结果都被复制和合并后，就会调用Reduce方法<br>Reduce结果会写入到HDFS中<h4 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h4></li><li>一般的原则是给shuffle分配尽可能多的内存，但前提是要保证Map、Reduce任务有足够的内存</li><li>对于Map，主要就是避免把文件写入磁盘，例如使用Combiner，增大io.sort.mb的值</li><li>对于Reduce，主要是把Map的结果尽可能地保存到内存中，同样也是要避免把中间结果写入磁盘。默认情况下，所有的内存都是分配给Reduce方法的，如果Reduce方法不怎么消耗内存，可以mapred.inmem.merge.threshold设成0，mapred.job.reduce.input.buffer.percent设成1.0</li><li>在任务监控中可通过Spilled records counter来监控写入磁盘的数，但这个值是包括map和reduce的</li><li>对于IO方面，可以Map的结果可以使用压缩，同时增大buffer size（io.file.buffer.size，默认4kb）<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><table><thead><tr><th>属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>io.sort.mb</td><td>100</td><td>映射输出分类时所使用缓冲区的大小.</td></tr><tr><td>io.sort.record.percent</td><td>0.05</td><td>剩余空间用于映射输出自身记录.在1.X发布后去除此属性.随机代码用于使用映射所有内存并记录信息.</td></tr><tr><td>io.sort.spill.percent</td><td>0.80</td><td>针对映射输出内存缓冲和记录索引的阈值使用比例.</td></tr><tr><td>io.sort.factor</td><td>10</td><td>文件分类时合并流的最大数量。此属性也用于reduce。通常把数字设为100.</td></tr><tr><td>min.num.spills.for.combine</td><td>3</td><td>组合运行所需最小溢出文件数目.</td></tr><tr><td>mapred.compress.map.output</td><td>false</td><td>压缩映射输出.</td></tr><tr><td>mapred.map.output.compression.codec</td><td>DefaultCodec</td><td>映射输出所需的压缩解编码器.</td></tr><tr><td>mapred.reduce.parallel.copies</td><td>5</td><td>用于向reducer传送映射输出的线程数目.</td></tr><tr><td>mapred.reduce.copy.backoff</td><td>300</td><td>时间的最大数量，以秒为单位，这段时间内若reducer失败则会反复尝试传输</td></tr><tr><td>io.sort.factor</td><td>10</td><td>组合运行所需最大溢出文件数目.</td></tr><tr><td>mapred.job.shuffle.input.buffer.percent</td><td>0.70</td><td>随机复制阶段映射输出缓冲器的堆栈大小比例</td></tr><tr><td>mapred.job.shuffle.merge.percent</td><td>0.66</td><td>用于启动合并输出进程和磁盘传输的映射输出缓冲器的阀值使用比例</td></tr><tr><td>mapred.inmem.merge.threshold</td><td>1000</td><td>用于启动合并输出和磁盘传输进程的映射输出的阀值数目。小于等于0意味着没有门槛，而溢出行为由 mapred.job.shuffle.merge.percent单独管理.</td></tr><tr><td>mapred.job.reduce.input.buffer.percent</td><td>0.0</td><td>用于减少内存映射输出的堆栈大小比例，内存中映射大小不得超出此值。若reducer需要较少内存则可以提高该值.</td></tr></tbody></table></li></ol><h2 id="MapReduce-编程"><a href="#MapReduce-编程" class="headerlink" title="MapReduce - 编程"></a>MapReduce - 编程</h2><p>处理 </p><ol><li>select：直接分析输入数据，取出需要的字段数据即可</li><li>where: 也是对输入数据处理的过程中进行处理，判断是否需要该数据</li><li>aggregation:min, max, sum</li><li>group by: 通过Reducer实现</li><li>sort</li><li>join: map join, reduce join</li></ol><p>优点：海量数据里离线处理，易开发，易运行</p><p>缺点：实时流式计算</p><p>(input) &lt;k1, v1&gt; -&gt; map -&gt; &lt;k2, v2&gt; -&gt; combine -&gt; &lt;k2, v2&gt; -&gt; reduce -&gt; &lt;k3, v3&gt; (output)</p><p>核心概念：</p><p>split：交由MapReduce作业来处理的数据块，是MapReduce中最小的计算单元。</p><p>HDFS：blocksize 是hdfs中最小的存储单元， 128M</p><p>默认情况下：他们两是一一对应的，可以手工设置（不建议）</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop-04 YARN</title>
    <link href="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-04%20yarn/"/>
    <url>/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-04%20yarn/</url>
    
    <content type="html"><![CDATA[<h2 id="YARN"><a href="#YARN" class="headerlink" title="YARN"></a>YARN</h2><h3 id="旧的MapReduce的架构："><a href="#旧的MapReduce的架构：" class="headerlink" title="旧的MapReduce的架构："></a>旧的MapReduce的架构：</h3><ul><li><p>JobTracker：负责资源管理，跟踪资源消耗和可用性，作业生命周期管理（调度作业任务，跟踪进度，为任务提供容错）</p></li><li><p>TaskTracker：加载或关闭任务，定时报告任务状态。</p></li><li><p>此架构会有以下问题：</p><ol><li>JobTracker是MapReduce的集中处理点，存在单点故障。</li><li>JobTracker完成了太多的任务，造成了过多的资源消耗，当MapReduce Job非常多的时候，会造成很大的内存开销。这也是业界普遍总结出老版本Hadoop的MapReduce只能支持4000节点的主机上限。</li><li>在TaskTracker端，以map/reduce task的数目作为资源的表示过于简单，没有考虑到cpu/内存的占用情况，如果两个大内存消耗的task被调度的一起，很容易出现OOM。</li><li>在TaskTracker端，把资源强制划分为map task slot 和 reduce task slot，如果当系统中只有map task或者只有reduce task的时候，会造成资源浪费，也就是集群资源的利用问题。</li><li>总结就是单点问题和资源利用率问题。</li></ol></li></ul><hr><h3 id="yarn的架构："><a href="#yarn的架构：" class="headerlink" title="yarn的架构："></a>yarn的架构：</h3><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-04%20yarn/yarn%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" class title="yarn架构图"><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-04%20yarn/yarn%E6%9E%B6%E6%9E%84%E5%9B%BE2.jpg" class title="yarn架构图"><p>YARN就是把JobTracker的职责拆分，将资源管理和任务调度监控拆分成独立的进程，一个全局的资源管理和一个每个作业的管理（ApplicationMaster）ResourceManager和NodeManager提供了计算资源的分配和管理，而ApplicationMaster则完成应用程序的运行。</p><ul><li>ResourceManager : RM  – 全局资源管理和任务调度<ul><li>整个集群同一时间提供服务的RM只有一个，负责集群资源的统一管理和调度。</li><li>处理客户端的请求：提交一个作业，杀死一个作业</li><li>监控NM，一旦NM挂了，那么改NM上运行的任务需要告诉AM来如何进行处理</li></ul></li><li>NodeManager: NM – 单个节点的资源管理和监控<ul><li>整个集群中有多个，负责自己本身节点资源管理和使用</li><li>定时向RM汇报本节点的资源使用情况</li><li>接受并处理来自RM的各种命令：启动Container</li><li>处理来自AM的命令</li><li>每个节点的资源管理</li></ul></li><li>ApplicationMaster: AM – 单个作业的资源管理和任务监控<ul><li>每个应用程序对应一个：MR、Spark，负责应用程序的管理</li><li>为应用程序向RM申请资源（core、memory），分配给内部task</li><li>需要与NM通信： 启动/停止task，task是运行在container里面，AM也是运行在Container里面的</li></ul></li><li>Container  – 资源申请的单位和任务运行的容器<ul><li>封装了CPU、Memory等资源的一个容器</li><li>是一个任务运行环境的抽象</li></ul></li><li>Client<ul><li>提交作业</li><li>查询作业的运行进度</li><li>杀死作业</li></ul></li></ul><hr><h3 id="架构对比"><a href="#架构对比" class="headerlink" title="架构对比"></a>架构对比</h3><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-04%20yarn/%E6%9E%B6%E6%9E%84%E5%AF%B9%E6%AF%94.jpg" class title="架构对比"><h2 id="YARN架构下形成了一个通用的资源管理平台和一个通用的应用计算平台。避免了旧架构的单点问题和资源利用率的问题，同时也让在其上运行的应用不局限于MapReduce形式。"><a href="#YARN架构下形成了一个通用的资源管理平台和一个通用的应用计算平台。避免了旧架构的单点问题和资源利用率的问题，同时也让在其上运行的应用不局限于MapReduce形式。" class="headerlink" title="YARN架构下形成了一个通用的资源管理平台和一个通用的应用计算平台。避免了旧架构的单点问题和资源利用率的问题，同时也让在其上运行的应用不局限于MapReduce形式。"></a><strong>YARN架构下形成了一个通用的资源管理平台和一个通用的应用计算平台。避免了旧架构的单点问题和资源利用率的问题，同时也让在其上运行的应用不局限于MapReduce形式。</strong></h2><h3 id="YARN的基本流程"><a href="#YARN的基本流程" class="headerlink" title="YARN的基本流程"></a>YARN的基本流程</h3><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-04%20yarn/yarn%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B2.jpg" class title="架构对比"><ol><li>Job submission<ol><li> 从ResourceManager中获取一个Application ID检查作业输出配置，计算输入分片拷贝作业资源（job jar、配置文件、分片信息）到HDFS，以便后面任务的执行。</li></ol></li><li>Job initialization<ol><li> ResourceManager将作业递交给Scheduler（有很多算法，一般根据优先级）Scheduler为作业分配一个Container，ResourceManager就加载一个application master process 并交给NodeManager。</li><li>管理ApplicationMaster主要是创建一系列的监控进程来跟踪作业的调度，同时获取输入分片，为每一个分片创建一个Map task和相应的reduce task Application Master ，还决定如何运行作业，如果作业很小（可配置），则直接在同一个JVM下运行。</li></ol></li><li>Task assignment<ol><li>ApplicationMaster 向Resource Manager 申请资源（一个个的Container，指定任务分配资源要求）一般是根据data locality来分配资源。</li></ol></li><li>Task execution<ol><li>ApplicationMaster根据ResourceManager的分配情况，在对应的NodeManager中启动Container从HDFS中读取任务所需资源（job  jar ，配置文件等）然后执行该任务。</li></ol></li><li>Progress and status update<ol><li>定时将任务的进度和状态报告给ApplicationMaster Client 定时向ApplicationMaster获取整个任务的进度和状态。</li></ol></li><li>Job completion<ol><li>Client 定时检查整个作业是否完成，作业完成后，会清空临时文件，目录。</li></ol></li></ol><hr><h3 id="YARN-ResourceManager"><a href="#YARN-ResourceManager" class="headerlink" title="YARN - ResourceManager"></a>YARN - ResourceManager</h3><p><strong>负责全局的资源管理和任务调度，把整个集群当成计算资源池，只关注分配，不管应用，且不负责容错。</strong></p><h4 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h4><ol><li>以前资源是每个节点分成一个个的Map slot和Reduce slot，现在是一个个Container，每个Container可以根据需要运行ApplicationMaster、map、Reduce或任意的程序。</li><li>以前的资源分配是静态的，目前是动态的，资源利用率更高。</li><li>Container是资源申请的单位，一个资源申请格式：<code>&lt;resource-name, priority, resource-requirement, number-of-containers&gt;</code>, resource-name：主机名、机架名或*（代表任意机器）, resource-requirement：目前只支持CPU和内存</li><li>用户提交作业到ResourceManger ，然后在某个NodeManager上分配一个Container来运行ApplicationMaster，ApplicationMaster再根据自身程序需要向ResourceManager申请资源。</li><li>YARN有一套Container的生命周期管理机制，而ApplicationMaster和其Container之间的管理是应用程序自己定义的。</li></ol><h4 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h4><ol><li>只关注资源的使用情况，根据需求合理分配资源。</li><li>Schedule可以根据申请的需要，在特定的机器上申请特定的资源（ApplicationMaster负责申请资源时的数据本地化的考虑，ResourceManager将尽量满足其申请需求，在指定的机器上分配Container，从而减少数据移动）。<h4 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h4><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-04%20yarn/ResourceManager.jpg" class></li></ol><ul><li>Client Service: 应用提交、终止、输出信息（应用、队列、集群等的状态信息）。</li><li>Adaminstration Service: 队列、节点、Client权限管理。</li><li>ApplicationMasterService: 注册、终止ApplicationMaster, 获取ApplicationMaster的资源申请或取消的请求，并将其异步地传给Scheduler, 单线程处理。</li><li>ApplicationMaster Liveliness Monitor: 接收ApplicationMaster的心跳消息，如果某个ApplicationMaster在一定时间内没有发送心跳，则被任务失效，其资源将会被回收，然后ResourceManager会重新分配一个ApplicationMaster运行该应用（默认尝试2次）。</li><li>Resource Tracker Service: 注册节点, 接收各注册节点的心跳消息。</li><li>NodeManagers Liveliness Monitor: 监控每个节点的心跳消息，如果长时间没有收到心跳消息，则认为该节点无效, 同时所有在该节点上的Container都标记成无效，也不会调度任务到该节点运行。</li><li>ApplicationManager: 管理应用程序，记录和管理已完成的应用。</li><li>ApplicationMaster Launcher: 一个应用提交后，负责与NodeManager交互，分配Container并加载ApplicationMaster，也负责终止或销毁。</li><li>YarnScheduler: 资源调度分配， 有FIFO(with Priority)，Fair，Capacity方式。</li><li>ContainerAllocationExpirer: 管理已分配但没有启用的Container，超过一定时间则将其回收。</li></ul><hr><h3 id="YARN-NodeManager"><a href="#YARN-NodeManager" class="headerlink" title="YARN - NodeManager"></a>YARN - NodeManager</h3><p>Node节点下的Container管理</p><ol><li>启动时向ResourceManager注册并定时发送心跳信息，等待ResourceManager的指令。</li><li>监控Container的运行，维护Container的生命周期，监控Container的资源使用情况。</li><li>启动或停止Container，管理任务运行时的依赖包（根据ApplicationMaster的需要，启动Container之前将需要的程序及其依赖包、配置文件等拷贝到本地）。</li></ol><ul><li><p>NodeStatusUpdater: 启动向ResourceManager注册，报告该节点的可用资源情况，通信的端口和后续状态的维护。</p></li><li><p>ContainerManager: 接收RPC请求（启动、停止），资源本地化（下载应用需要的资源到本地，根据需要共享这些资源）。</p><pre><code>PUBLIC: /filecachePRIVATE: /usercache//filecacheAPPLICATION: /usercache//appcache//（在程序完成后会被删除）</code></pre></li><li><p>ContainersLauncher: 加载或终止Container。</p></li><li><p>ContainerMonitor: 监控Container的运行和资源使用情况。</p></li><li><p>ContainerExecutor: 和底层操作系统交互，加载要运行的程序。</p></li></ul><hr><h3 id="YARN-ApplicationMaster"><a href="#YARN-ApplicationMaster" class="headerlink" title="YARN - ApplicationMaster"></a>YARN - ApplicationMaster</h3><p>单个作业的资源管理和任务监控</p><p>具体功能描述：</p><ol><li>计算应用的资源需求，资源可以是静态或动态计算的，静态的一般是Client申请时就指定了，动态则需要ApplicationMaster根据应用的运行状态来决定。</li><li>根据数据来申请对应位置的资源（Data Locality）。</li><li>向ResourceManger申请资源，与NodeManger交互进行程序的运行和监控，监控申请的资源的使用情况，监控作业调度。</li><li>跟踪任务状态和调度，定时向ResourceManger发送心跳信息，报告资源的使用情况和应用的进度信息。</li><li>负责本作业内的任务的容错。</li></ol><p>ApplicationMaster可以是用任何语言编写的程序，它和ResourceManger和NodeManager之间通过protocolBuf交互，以前是一个全局的JobTracker负责的，现在每个左右都一个，可伸缩性更强，至少不会因为作业太多，造成JobTracker瓶颈。同时将作业的逻辑放到一个独立的ApplicationMaster中，使得灵活性更高，每个作业都可以由自己的处理方式，不用绑定到MapReduce的处理模式上。</p><h4 id="如何计算资源需求："><a href="#如何计算资源需求：" class="headerlink" title="如何计算资源需求："></a>如何计算资源需求：</h4><p>一般的MapReduce是根据block数量来定Map和Reduce的计算数量，然后一般的Map或Reduce就占用一个Container。</p><h4 id="如何发现数据的本地化："><a href="#如何发现数据的本地化：" class="headerlink" title="如何发现数据的本地化："></a>如何发现数据的本地化：</h4><h2 id="数据本地化是通过HDFS的block分片信息获取的"><a href="#数据本地化是通过HDFS的block分片信息获取的" class="headerlink" title="数据本地化是通过HDFS的block分片信息获取的"></a>数据本地化是通过HDFS的block分片信息获取的</h2><h3 id="YARN-Container"><a href="#YARN-Container" class="headerlink" title="YARN - Container"></a>YARN - Container</h3><ol><li>基本的资源单位（cpu、内存等）。</li><li>Container可以加载任何程序，而且不限于java。</li><li>一个Node可以包含多个Container，也可以是一个大的Container。</li><li>ApplicationMaster可以根据需要，动态申请和释放Container。</li></ol><hr><h3 id="YARN-Failover"><a href="#YARN-Failover" class="headerlink" title="YARN - Failover"></a>YARN - Failover</h3><p>失败类型</p><ol><li>程序问题。</li><li>进程崩溃。</li><li>硬件问题。</li></ol><p>失败处理</p><p>任务失败</p><ol><li>运行时异常或者JVM退出都会报告给ApplicationMaster。</li><li>通过心跳来检查挂住的任务(timeout)，会检查多次（可配置）才判断该任务是否失效。</li><li>一个作业的任务失败率超过配置，则认为该作业失败。</li><li>失败的任务或作业都会有ApplicationMaster重新运行。<h4 id="ApplicationMaster失败"><a href="#ApplicationMaster失败" class="headerlink" title="ApplicationMaster失败"></a>ApplicationMaster失败</h4></li><li>ApplicationMaster定时发送心跳信号到ResourceManager，通常一旦ApplicationMaster失败，则认为失败，但也可以通过配置多次后才失败</li><li>一旦ApplicationMaster失败，ResourceManager会启动一个新的ApplicationMaster</li><li>新的ApplicationMaster负责恢复之前错误的ApplicationMaster的状(yarn.app.mapreduce.am.job.recovery.enable=true)，这一步是通过将应用运行状态保存到共享的存储上来实现的，ResourceManager不会负责任务状态的保存和恢复</li><li>Client也会定时向ApplicationMaster查询进度和状态，一旦发现其失败，则向ResouceManager询问新的ApplicationMaster<h4 id="NodeManager失败"><a href="#NodeManager失败" class="headerlink" title="NodeManager失败"></a>NodeManager失败</h4></li><li>NodeManager定时发送心跳到ResourceManager，如果超过一段时间没有收到心跳消息，ResourceManager就会将其移除</li><li>任何运行在该NodeManager上的任务和ApplicationMaster都会在其他NodeManager上进行恢复</li><li>如果某个NodeManager失败的次数太多，ApplicationMaster会将其加入黑名单（ResourceManager没有），任务调度时不在其上运行任务<h4 id="ResourceManager失败"><a href="#ResourceManager失败" class="headerlink" title="ResourceManager失败"></a>ResourceManager失败</h4></li><li>通过checkpoint机制，定时将其状态保存到磁盘，然后失败的时候，重新运行</li><li>通过zookeeper同步状态和实现透明的HA</li></ol><p><strong>可以看出，一般的错误处理都是由当前模块的父模块进行监控（心跳）和恢复。而最顶端的模块则通过定时保存、同步状态和zookeeper来ֹ实现HA</strong></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop-03 HDFS</title>
    <link href="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-03%20hdfs/"/>
    <url>/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-03%20hdfs/</url>
    
    <content type="html"><![CDATA[<h2 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h2><p>介绍： hdfs是Hadoop实现的分布式文件系统</p><h3 id="HDFS架构："><a href="#HDFS架构：" class="headerlink" title="HDFS架构："></a>HDFS架构：</h3><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-03%20hdfs/hdfs%E6%9E%B6%E6%9E%84%E5%9B%BE.png" class title="hdfs架构图"><p>1个Master（NameNode/NN） 带 N个Slaves（DataNode/DN）</p><p>blocksize：128M</p><p>NN：负责客户端请求的响应，负责元数据（文件的名称、副本系数、block存放的DN）的管理</p><p>DN：存储用户的文件对应的数据块，要定期向NN发送心跳信息，汇报本身及其所有的block信息，健康状况。</p><ul><li>NameNode<ol><li>存储文件的metadata，运行时所有数据都保存到内存，整个hdfs可存储的文件数受限于NameNode的内存大小。</li><li>一个Block在NameNode中对应一条记录（一般一个block占用150字节），如果大量小文件，会消耗大量内存。同时map task的数量是由splits来决定的，所以用MapReduce处理大量的小文件时，就会产生过多的map task，线程管理的开销将会增加作业时间。处理大量小文件的速度远远小于处理同等大小的大文件速度。因此，Hadoop建议存储大文件。</li><li>数据会定时保存到本地磁盘，但不保存block的位置信息，而是由DataNode注册时上报和运行时维护（NameNode和DateNode的相关信息并不保存到NameNode的文件系统中，而是NameNode每次重启后，动态重建）</li><li>NameNode失效则整个hdfs都会失效，所以要保证NameNode的可用性。</li></ol></li><li>DataNode<ol><li> 保存具体的block数据。</li><li> 负责数据的读写操作和复杂操作。</li><li>DataNode启动时会向NameNode报告当前存储的数据块信息，后续也会定时报告修改信息。</li><li>DataNode之间会互相进行通信，复制数据块，保证数据的冗余性。</li></ol></li><li>Block数据块<ol><li>基本存储单位，默认为128M（配置大的块主要是因为a.减少搜寻时间，一般硬盘传输速率比寻道时间要快，大的块可以减少寻道时间。b.减少管理块的数据开销，每个块需要在NameNode上有对应的记录。c.对数据块进行读写，减少建立网络的连接成本。）</li><li>一个大文件会被拆成多个块，然后存储于不同的机器。如果一个文件少于block的大小，那么实际占用的空间为文件的大小。</li><li>基本的读写资源，类似于磁盘的页，每次都是读写一个块。</li><li>每个块都是被复制到多台机器，默认是3份。</li></ol></li><li>Secondary NameNode<ol><li>定时与NameNode进行同步（定期合并文件系统镜像和编辑日志，然后把合并后的数据传给NameNode，替换其镜像，并清空编辑日志，类似于CheckPoint机制），但NameNode失效后仍需要手动将其设置为主机。</li></ol></li></ul><hr><h3 id="HDFS-写文件"><a href="#HDFS-写文件" class="headerlink" title="HDFS-写文件"></a>HDFS-写文件</h3><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-03%20hdfs/hdfs-write.png" class><ol><li><p>客户端将文件写入本地磁盘的Hdfs Client文件中。</p></li><li><p>当临时文件大小达到一个block的时候，Hdfs Client通知NameNode，申请写入文件。</p></li><li><p>NameNode在Hdfs的文件系统中创建一个文件，并把该block id和要写入的DataNode的列表返回给客户端。</p></li><li><p>客户端收到这些信息后，将临时文件写入DataNodes。</p><ol><li>客户端将文件内容写入第一个DataNode（一般以4kb为单位进行传输）。</li><li> 第一个DataNode接收后，将数据写入本地磁盘，同时也传输给第二个DataNode。</li><li>以此类推到最后一个DataNode，数据在DataNode之间是通过pipline的方式进行复制的。</li><li>后面的DataNode接受完数据后，都会发送一个确认给前一个DataNode，最终第一个DataNode返回确认给客户端。</li><li>当客户端收到整个block的确认后，会向NameNode发送一个最终的确认信息。</li><li>如果写入某个DataNode失败，数据会继续写人其他的DataNode。然后NameNode会找另外一个好的DataNode继续复制，以保证冗余性。</li><li>每个block都会有一个校验码，并存放在独立的文件中，以便读的时候来验证其完整性。</li></ol></li><li><p>文件写完后（客户端关闭），NameNode提交文件（这时文件才可见，如果提交前，NameNode挂掉，那文件也就丢失了。只保证了数据信息写到NameNode上，并不能保证数据已经被写到了DataNode中）</p><h3 id="Rack-aware（机架感知）"><a href="#Rack-aware（机架感知）" class="headerlink" title="Rack aware（机架感知）"></a>Rack aware（机架感知）</h3><p> 通过配置文件指定机架名和DNS的对应关系</p><p> 假设复制参数是3，在写入文件时，会在本地的机架保存一份数据，然后在另外一个机架内保存两份数据（同机架内的传输速度快，从而提高性能）</p><p> 整个HDFS的集群，最好是负载平衡的，这样才能尽量利用集群的优势</p></li></ol><hr><h3 id="HDFS-读文件"><a href="#HDFS-读文件" class="headerlink" title="HDFS-读文件"></a>HDFS-读文件</h3><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-03%20hdfs/hdfs-read.png" class><ol><li>客户端向NameNode发送读取请求。</li><li>NameNode返回文件所有Block和这些block所在的DataNodes(包括复制节点)</li><li>客户端直接从DataNode中读取数据，如果该DataNode读取失败(DataNode失效或校验码不对)，则从复制节点中读取(如果读取的数据就在本机，则直接读取，否则通过网络读取)。</li></ol><hr><h3 id="HDFS-可靠性"><a href="#HDFS-可靠性" class="headerlink" title="HDFS-可靠性"></a>HDFS-可靠性</h3><ul><li>冗余副本策略<ul><li>可以在hdfs-site.xml中设置复制因子指定副本数量。<br>所有数据块都可副本。</li><li>DataNode启动时，遍历本地文件系统，产生一份HDFS数据块和本地文件对应关系列表(blockreport)汇报给NameNode。</li></ul></li><li>机架策略<ul><li>HDFS的“机架感知”，通过节点之间发送一个数据包，来判断他们是否在同一个机架。</li><li>一般本机架放一个副本，在其他机架再存放一个副本，这样可以防止机架失效时丢失数据，也可以提高带宽利用率。</li></ul></li><li>心跳机制<ul><li>NataNode定期从DataNode接受心跳信息和块报告。</li><li>NameNode根据块报告验证元数据。</li><li>没有按时发送心跳的DataNode会被标记为宕机，不会再给他任何i/o请求。</li><li>如果DataNode失效造成副本数量下降，并且低于预先设置的值，NameNode会检测这些数据库，并在合适的时间重新复制。</li><li>引发重新复制的原因还包括数据副本本身损坏，磁盘错误，复制因子被增大等。</li></ul></li><li>安全模式<ul><li>NameNode启动时会经过一个“安全模式”阶段。</li><li>安全模式阶段不会产生数据写。</li><li>在此阶段NameNode收集各个DataNode的报告，当数据块达到最小副本数以上时，会被认为是“安全”的。</li><li>在一定比例(可设置)的数据块被确定为“安全”后，再过若干时间，安全模式结束。</li><li>当检测到副本不足数据块时，该块会被复制，直到达到最小副本数。</li></ul></li><li>检验和<ul><li>在文件创立时，每个块都产生校验和。</li><li>校验和会作为单独一个隐藏文件保存在命名空间下。</li><li>客户端获取数据时可以检查校验和是否相同，从而发现数据块是否损坏。</li><li>如果正在读取的数据块损坏，则可以继续读取其他副本。</li></ul></li><li>回收站<ul><li>删除文件时，其实是放入回收站/trach中。</li><li>回收站里的文件是可以快速恢复的。</li><li>可以设置一个时间值，当回收站里的文件的存放时间超过这个值，就被彻底删除，并且释放占用的数据块。</li></ul></li><li>元数据保护<ul><li>映像文件和事务日志是NameNode的核心数据，可以配置为拥有多个副本。</li><li>副本会降低NameNode的处理速度，但增加安全性。</li><li>NameNode依然是单点，如果发生故障需要切换。</li></ul></li><li>快照机制</li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop-02 环境搭建</title>
    <link href="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-02%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-02%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="Hadoop-环境搭建"><a href="#Hadoop-环境搭建" class="headerlink" title="Hadoop 环境搭建"></a>Hadoop 环境搭建</h2><ol><li><p>安装jdk</p></li><li><p>安装ssh 设置免密登录</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-keygen -t rsa<br>cp ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_.pub ~<span class="hljs-regexp">/.ssh/</span>authorized_keys<br></code></pre></td></tr></table></figure></li><li><p>Hadoop 环境安装</p><p><code>/etc/hadoop/hadoop-env.sh</code> 修改<code>java_home</code><br>Hadoop可运行于一般的商用服务器上，具有高容错、高可靠性、高扩展性等特点特别适合写一次，读多次的场景。</p><ul><li>3.1  <code>core-site.xml</code><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-params">&lt;configuration&gt;</span><br>    <span class="hljs-params">&lt;property&gt;</span><br>        <span class="hljs-params">&lt;name&gt;</span>fs.defaultFS<span class="hljs-params">&lt;/name&gt;</span><br>        <span class="hljs-params">&lt;value&gt;</span>hdfs:<span class="hljs-comment">//172.16.100.151:8020&lt;/value&gt;</span><br>    <span class="hljs-params">&lt;/property&gt;</span><br>    <span class="hljs-params">&lt;property&gt;</span><br>        <span class="hljs-params">&lt;name&gt;</span>hadoop.tmp.dir<span class="hljs-params">&lt;/name&gt;</span><br>        <span class="hljs-params">&lt;value&gt;</span><span class="hljs-meta-keyword">/home/</span>hadoop<span class="hljs-meta-keyword">/app/</span>tmp<span class="hljs-params">&lt;/value&gt;</span><br>    <span class="hljs-params">&lt;/property&gt;</span><br><span class="hljs-params">&lt;/configuration&gt;</span><br></code></pre></td></tr></table></figure></li><li>3.2 <code>hdfs-site.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!--副本个数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><code>解决安全模式问题</code> “hadoop Cannot create directory Name node is in safe mode.”</li></ul></li></ol><p>离开安全模式方法：<code>bin/hadoop dfsadmin -safemode leave</code></p><h3 id="yarn-环境搭建："><a href="#yarn-环境搭建：" class="headerlink" title="yarn 环境搭建："></a>yarn 环境搭建：</h3><ol><li><p><code>etc/hadoop/mapred-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>etc/hadoop/yarn-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>服务启动：</p></li></ol><p><code>sbin/start-yarn.sh</code></p><p>服务停止：</p><p><code>sbin/stop-yarn.sh</code></p><p>ResourceManager - <a href="http://localhost:8088/">http://localhost:8088/</a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop-01 初识Hadoop</title>
    <link href="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-01%20%E5%88%9D%E8%AF%86Hadoop/"/>
    <url>/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-01%20%E5%88%9D%E8%AF%86Hadoop/</url>
    
    <content type="html"><![CDATA[<h2 id="初识Hadoop"><a href="#初识Hadoop" class="headerlink" title="初识Hadoop"></a>初识Hadoop</h2><p>Hadoop可运行于一般的商用服务器上，具有高容错、高可靠性、高扩展性等特点特别适合写一次，读多次的场景。</p><p>适合</p><ul><li>大规模数据</li><li>流式数据（写一次，读多次）</li><li>商用硬件（一般硬件）</li></ul><p>不适合</p><ul><li>低延时的数据访问</li><li>大量的小文件</li><li>频繁修改文件（基本就是写1次）<h2 id="Hadoop架构"><a href="#Hadoop架构" class="headerlink" title="Hadoop架构"></a>Hadoop架构</h2><img src="/2020/11/06/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop/Hadoop-01%20%E5%88%9D%E8%AF%86Hadoop/hadoop%E6%9E%B6%E6%9E%84%E5%9B%BE.png" class title="hadoop架构图"></li><li>分布式文件系统hdfs</li><li>分布式资源调度yarn</li><li>分布式计算框架MapReduce</li><li>Others: 利用YARN的资源管理功能实现其他的数据处理方式</li></ul><p>hadoop包含的模块：</p><ul><li>hadoop common  – 公共模块</li><li>hadoop distributed file system（hdfs）–提供数据存储</li><li>Hadoop yarn – 作业调度，资源管理</li><li>hadoop MapReduce –yarn之上并行处理框架</li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>Hadoop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于gitee+hexo搭建个人博客</title>
    <link href="/2020/09/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/Hexo/hexo/"/>
    <url>/2020/09/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/Hexo/hexo/</url>
    
    <content type="html"><![CDATA[<p>什么是 Hexo？</p><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。  —来自hexo官网<br><code>https://hexo.io/zh-cn/docs/</code></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>nodejs</li><li>git</li></ul><ol><li><p>安装hexo。 （npm默认镜像源在国外，会有下载失败情况，建议更换taobao镜像源）</p><p> <code>$ npm install -g hexo-cli</code></p></li><li><p>新建个人文件夹，初始化目录为hexo目录。命令如下：</p><pre><code> $ hexo init $ npm install 执行完毕后目录如下： hexo  ├── _config.landscape.yml ├── _config.yml ├── node_modules ├── package-lock.json ├── package.json ├── scaffolds ├── source └── themes</code></pre></li><li><p>启动hexo</p></li></ol><p>在hexo目录下执行 <code>hexo server</code></p><img src="/2020/09/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/Hexo/hexo/hexo%E5%90%AF%E5%8A%A8%E5%9B%BE.png" class><p>浏览器访问<strong><a href="http://localhost:4000/">http://localhost:4000</a></strong> 即可</p><h2 id="gitee网站配置"><a href="#gitee网站配置" class="headerlink" title="gitee网站配置"></a>gitee网站配置</h2><ol><li><p>在gitee新建仓库*<strong>.gitee.io</strong> (*号为任意名称)</p></li><li><p>修改<code>_config.yml</code>文件</p><pre><code> 这里只截取部分配置信息 # URL ## If your site is put in a subdirectory, set url as &#39;http://example.com/child&#39; and root as &#39;/child/&#39; url: 后续需要修改  root: 同目录名  deploy:   type: &#39;git&#39;   repo: git仓库地址   如： https://gitee.com/test/test   branch: master   message: blog update</code></pre></li><li><p>安装插件 <code>npm install --save hexo-deployer-git</code></p></li><li><p>执行命令<code>hexo g -d</code> 这里会提示用户名密码，成功后在gitee页面可以看到本地代码已提交到仓库中。</p><img src="/2020/09/01/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/Hexo/hexo/gitee-pages.png" class></li><li><p>如图操作后点击启动，成功后复制网站地址，访问发现静态资源没有加载。</p></li></ol><ul><li>将配置文件中的url修改为网站地址 例如： <a href="http://ccqi3.gitee.io/test">http://ccqi3.gitee.io/test</a></li><li>root 后是仓库名称如 root: /test/</li></ul><ol start="6"><li>修改完后在hexo目录下再次执行<code>hexo g -d</code> (以后配置有调整或者发布新的文章都用此命令即可)</li><li>在gitee的pages页面里点击更新，再次访问网址发现已经搭建好博客了。</li></ol><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><ul><li>修改<code>_config.yml</code> 文件中的 <code>post_asset_folder:false</code> 改为 <strong>true</strong><br>这样新建文档时会在文档同级生成同名文件夹，图片资源放入其中。</li><li>安装插件<br><code>npm install https://github.com/7ym0n/hexo-asset-image --save</code></li></ul><p><code>&#123;% asset_img test.jpg This is an test image %&#125;</code><br>test.jpg 就是图片文件名称 后面文字是图片描述</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><code>hexo generate</code></p><p><code>hexo server</code></p><p><code>hexo deploy</code></p><p><code>hexo clean</code></p><p><code>hexo new page &quot;type&quot; </code> <strong>type</strong> 如下：</p><table><thead><tr><th>page</th><th>type</th><th>内容</th></tr></thead><tbody><tr><td>tages</td><td>tages</td><td>标签</td></tr><tr><td>categories</td><td>categories</td><td>分类</td></tr><tr><td>archives</td><td>archives</td><td>博客</td></tr><tr><td>about</td><td>about</td><td>关于</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的博客</title>
    <link href="/2020/09/01/%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/09/01/%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么要写博客"><a href="#为什么要写博客" class="headerlink" title="为什么要写博客"></a>为什么要写博客</h2><ul><li>生活记录</li><li>编程笔记</li></ul>]]></content>
    
    
    <categories>
      
      <category>个人计划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>04-MyBatis执行器</title>
    <link href="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/04-MyBatis%E6%89%A7%E8%A1%8C%E5%99%A8/"/>
    <url>/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/04-MyBatis%E6%89%A7%E8%A1%8C%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="MyBatis执行器-Executor"><a href="#MyBatis执行器-Executor" class="headerlink" title="MyBatis执行器(Executor)"></a>MyBatis执行器(Executor)</h2><p>当构建完成<code>SqlSession</code>后，就需要执行SQL语句，MyBatis中的<code>Executor</code>类是执行引擎的核心，是由它来完成跟数据库的交互。<code>Executor</code>类图如下：</p><img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/04-MyBatis%E6%89%A7%E8%A1%8C%E5%99%A8/Executor%E7%B1%BB%E5%9B%BE.png" class><p>从图中可以看出，Executor主要提供的方法如下：</p><ul><li>query|update(insert和delete也是使用update)。</li><li>事务提交/回滚，委派给Transaction对象来完成。</li><li>缓存createCacheKey/isCached/clearLocalCache</li><li>提交commit，回滚rollback<br>重要方法参数上解释：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ms 存储了一个sql对应的所有信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parameter 参数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> rowBounds 分页参数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> resultHandler  结果处理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> boundSql sql信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">doQuery</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>  Configuration configuration = ms.getConfiguration();<br>  StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);<br>  Statement stmt = prepareStatement(handler, ms.getStatementLog());<br>  <span class="hljs-keyword">return</span> handler.query(stmt, resultHandler);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="执行器分类"><a href="#执行器分类" class="headerlink" title="执行器分类"></a>执行器分类</h2></li></ul><ol><li><code>SimpleExecutor</code>(简易执行器)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>  Statement stmt = <span class="hljs-keyword">null</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    Configuration configuration = ms.getConfiguration();<br>    StatementHandler handler = configuration.newStatementHandler(<span class="hljs-keyword">this</span>, ms, parameter, RowBounds.DEFAULT, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    stmt = prepareStatement(handler, ms.getStatementLog());<br>    <span class="hljs-keyword">return</span> handler.update(stmt);<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    closeStatement(stmt);<span class="hljs-comment">//关闭Statement</span><br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> Statement <span class="hljs-title">prepareStatement</span><span class="hljs-params">(StatementHandler handler, Log statementLog)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>  Statement stmt;<br>  Connection connection = getConnection(statementLog);<br>  stmt = handler.prepare(connection, transaction.getTimeout());<br>  handler.parameterize(stmt);<br>  <span class="hljs-keyword">return</span> stmt;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>ReuseExecutor</code>(复用型执行器)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>  Configuration configuration = ms.getConfiguration();<br>  StatementHandler handler = configuration.newStatementHandler(<span class="hljs-keyword">this</span>, ms, parameter, RowBounds.DEFAULT, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>  Statement stmt = prepareStatement(handler, ms.getStatementLog());<br>  <span class="hljs-keyword">return</span> handler.update(stmt);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> Statement <span class="hljs-title">prepareStatement</span><span class="hljs-params">(StatementHandler handler, Log statementLog)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>  Statement stmt;<br>  BoundSql boundSql = handler.getBoundSql();<br>  String sql = boundSql.getSql();<br>  <span class="hljs-keyword">if</span> (hasStatementFor(sql)) &#123;<br>    stmt = getStatement(sql);<br>    applyTransactionTimeout(stmt);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    Connection connection = getConnection(statementLog);<br>    stmt = handler.prepare(connection, transaction.getTimeout());<br>    putStatement(sql, stmt);<br>  &#125;<br>  handler.parameterize(stmt);<br>  <span class="hljs-keyword">return</span> stmt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasStatementFor</span><span class="hljs-params">(String sql)</span> </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">return</span> statementMap.keySet().contains(sql) &amp;&amp; !statementMap.get(sql).getConnection().isClosed();<br>  &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>BatchExecutor</code>（批处理型执行器）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameterObject)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>  <span class="hljs-keyword">final</span> Configuration configuration = ms.getConfiguration();<br>  <span class="hljs-keyword">final</span> StatementHandler handler = configuration.newStatementHandler(<span class="hljs-keyword">this</span>, ms, parameterObject, RowBounds.DEFAULT, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>  <span class="hljs-keyword">final</span> BoundSql boundSql = handler.getBoundSql();<br>  <span class="hljs-keyword">final</span> String sql = boundSql.getSql();<br>  <span class="hljs-keyword">final</span> Statement stmt;<br>  <span class="hljs-keyword">if</span> (sql.equals(currentSql) &amp;&amp; ms.equals(currentStatement)) &#123;<br>    <span class="hljs-keyword">int</span> last = statementList.size() - <span class="hljs-number">1</span>;<br>    stmt = statementList.get(last);<br>    applyTransactionTimeout(stmt);<br>    handler.parameterize(stmt);<span class="hljs-comment">//fix Issues 322</span><br>    BatchResult batchResult = batchResultList.get(last);<br>    batchResult.addParameterObject(parameterObject);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    Connection connection = getConnection(ms.getStatementLog());<br>    stmt = handler.prepare(connection, transaction.getTimeout());<br>    handler.parameterize(stmt);    <span class="hljs-comment">//fix Issues 322</span><br>    currentSql = sql;<br>    currentStatement = ms;<br>    statementList.add(stmt);<br>    batchResultList.add(<span class="hljs-keyword">new</span> BatchResult(ms, sql, parameterObject));<br>  &#125;<br>  handler.batch(stmt);<br>  <span class="hljs-keyword">return</span> BATCH_UPDATE_RETURN_VALUE;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三种执行器执行对比："><a href="#三种执行器执行对比：" class="headerlink" title="三种执行器执行对比："></a>三种执行器执行对比：</h2><h3 id="doQuery"><a href="#doQuery" class="headerlink" title="doQuery()"></a>doQuery()</h3>环境准备<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">SqlSessionFactory sqlSessionFactory;<br>MappedStatement ms;<br>BoundSql boundSql;<br>Configuration configuration;<br>Transaction transaction;<br>DataSource dataSource;<br><span class="hljs-meta">@Before</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, SQLException </span>&#123;<br>    <span class="hljs-comment">// 读取mybatis核心配置文件</span><br>    Reader reader = Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>    <span class="hljs-comment">// 创建会话工厂</span><br>    SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>    sqlSessionFactory = sqlSessionFactoryBuilder.build(reader);<br><br>    Configuration configuration = sqlSessionFactory.getConfiguration();<br>    dataSource = configuration.getEnvironment().getDataSource();<br>    transaction = configuration.getEnvironment().getTransactionFactory().newTransaction(dataSource.getConnection());<br>    ms = sqlSessionFactory.getConfiguration().getMappedStatement(<span class="hljs-string">&quot;com.mybatis.mapper.UserMapper.updateUser&quot;</span>);<br>    boundSql = ms.getBoundSql(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">SqlSessionFactory sqlSessionFactory;<br>MappedStatement ms;<br>BoundSql boundSql;<br>Configuration configuration;<br>Transaction transaction;<br>DataSource dataSource;<br><span class="hljs-meta">@Before</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, SQLException </span>&#123;<br>    <span class="hljs-comment">// 读取mybatis核心配置文件</span><br>    Reader reader = Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>    <span class="hljs-comment">// 创建会话工厂</span><br>    SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>    sqlSessionFactory = sqlSessionFactoryBuilder.build(reader);<br><br>    Configuration configuration = sqlSessionFactory.getConfiguration();<br>    dataSource = configuration.getEnvironment().getDataSource();<br>    transaction = configuration.getEnvironment().getTransactionFactory().newTransaction(dataSource.getConnection());<br>    ms = sqlSessionFactory.getConfiguration().getMappedStatement(<span class="hljs-string">&quot;com.mybatis.mapper.UserMapper.findStudentById&quot;</span>);<br>    boundSql = ms.getBoundSql(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><code>SimpleExecutor</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SimpleExecutorSelect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    SimpleExecutor executor = <span class="hljs-keyword">new</span> SimpleExecutor(configuration, transaction);<br>    executor.doQuery(ms, <span class="hljs-number">1</span>, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, boundSql);<br>    executor.doQuery(ms, <span class="hljs-number">1</span>, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, boundSql);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/04-MyBatis%E6%89%A7%E8%A1%8C%E5%99%A8/SimpleExecutorSelect.png" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReuseExecutorSelect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    ReuseExecutor executor = <span class="hljs-keyword">new</span> ReuseExecutor(configuration, transaction);<br>    executor.doQuery(ms, <span class="hljs-number">1</span>, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, boundSql);<br>    executor.doQuery(ms, <span class="hljs-number">1</span>, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, boundSql);<br><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/04-MyBatis%E6%89%A7%E8%A1%8C%E5%99%A8/ReuseExecutorSelect.png" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BatchExecutorSelect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    BatchExecutor executor = <span class="hljs-keyword">new</span> BatchExecutor(configuration, transaction);<br>    executor.doQuery(ms, <span class="hljs-number">1</span>, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, boundSql);<br>    executor.doQuery(ms, <span class="hljs-number">1</span>, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, boundSql);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/04-MyBatis%E6%89%A7%E8%A1%8C%E5%99%A8/BatchExecutorSelect.png" class></li></ol><h3 id="doUpdate"><a href="#doUpdate" class="headerlink" title="doUpdate()"></a>doUpdate()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SimpleExecutorUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    SimpleExecutor executor = <span class="hljs-keyword">new</span> SimpleExecutor(configuration, transaction);<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setId(<span class="hljs-string">&quot;10&quot;</span>);<br>    user.setUsername(<span class="hljs-string">&quot;2323&quot;</span>);<br>    executor.doUpdate(ms, user);<br>    executor.doUpdate(ms, user);<br><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/04-MyBatis%E6%89%A7%E8%A1%8C%E5%99%A8/SimpleExecutorUpdate.png" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReuseExecutorUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    ReuseExecutor executor = <span class="hljs-keyword">new</span> ReuseExecutor(configuration, transaction);<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setId(<span class="hljs-string">&quot;10&quot;</span>);<br>    user.setUsername(<span class="hljs-string">&quot;2323&quot;</span>);<br>    executor.doUpdate(ms, user);<br>    executor.doUpdate(ms, user);<br><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/04-MyBatis%E6%89%A7%E8%A1%8C%E5%99%A8/ReuseExecutorUpdate.png" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BatchExecutorUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    BatchExecutor executor = <span class="hljs-keyword">new</span> BatchExecutor(configuration, transaction);<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setId(<span class="hljs-string">&quot;10&quot;</span>);<br>    user.setUsername(<span class="hljs-string">&quot;2323&quot;</span>);<br>    executor.doUpdate(ms, user);<br>    executor.doUpdate(ms, user);<br>    executor.commit(<span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/04-MyBatis%E6%89%A7%E8%A1%8C%E5%99%A8/BatchExecutorUpdate.png" class><h2 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h2><p><code>SimpleExecutor</code></p><ul><li>每条SQL都要进行预处理。</li><li>每次只执行一条SQL。</li></ul><p><code>ReuseExecutor</code></p><ul><li>相同SQL只需要预处理一次。</li><li>每次只执行一条SQL。</li></ul><p><code>BatchExecutor</code></p><ul><li>每条SQL都要处理一次。</li><li>多条SQL可以一次批量执行。</li><li>最后一定要调用commit()方法，否则不生效。</li></ul>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码阅读</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-MyBatis-会话构建过程</title>
    <link href="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/03-MyBatis-%E4%BC%9A%E8%AF%9D%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <url>/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/03-MyBatis-%E4%BC%9A%E8%AF%9D%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="MyBatis-会话构建过程"><a href="#MyBatis-会话构建过程" class="headerlink" title="MyBatis 会话构建过程"></a>MyBatis 会话构建过程</h2><p>这里先写一个简单的测试案例，通过dubug模式来了解Mybatis的数据查询过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">// 读取mybatis核心配置文件</span><br>    Reader reader = Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>    <span class="hljs-comment">// 创建会话工厂</span><br>    SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(reader);<br>    SqlSession session = sqlSessionFactory.openSession();<br>    User user = session.selectOne(<span class="hljs-string">&quot;com.mybatis.pojo.User.findStudentById&quot;</span>,<span class="hljs-number">1</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/03-MyBatis-%E4%BC%9A%E8%AF%9D%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/MyBatis%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class><p>这里可以简单看出MyBatis执行流程非常简单，第一步根据配置文件得到一个会话工厂，后由会话工厂开启会话，然后在会话中执行语句即可。</p><img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/03-MyBatis-%E4%BC%9A%E8%AF%9D%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/SqlSessionFactoryBuilder.png" class><p><code>SqlSessionFactoryBuild</code>类中，除最后一个方法，其余方法的参数都跟配置有关，由此可以推断这些方法都是为了读取配置文件，实例化出<code>XMLConfigBuilder</code>，最终由<code>build(Configuration config)</code>方法来创建真正的<code>SqlSessionFactory</code>。<br><strong>Configuration</strong>这个类非常重要，里面的参数都是MyBatis的配置项。</p><img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/03-MyBatis-%E4%BC%9A%E8%AF%9D%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/SqlSession%E5%88%9D%E5%A7%8B%E5%8C%96%E7%B1%BB%E5%9B%BE.png" class><p>由图可以发现<code>Configuration</code>和<code>DefaultSqlSessionFactory</code>是一对一的，也就是说从一个<code>DefaultSqlSessionFactory</code>衍生出来的<code>SqlSession</code>，<code>Configuration</code>是全局唯一的。<code>SqlSessionFactory</code>提供了获取<code>Configuration</code>的方法，所以可以实现修改<code>Configuration</code>来达到动态调整属性的目的，但是一定要注意修改过程中可能会影响到其他<code>SqlSession</code>的执行。</p>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码阅读</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-MyBatis-环境搭建</title>
    <link href="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/02-MyBatis-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/02-MyBatis-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="MyBatis-源码"><a href="#MyBatis-源码" class="headerlink" title="MyBatis 源码"></a>MyBatis 源码</h2><p>MyBatis<a href="https://mybatis.org/mybatis-3/zh/index.html">官方文档</a><br><a href="https://github.com/mybatis/mybatis-3/releases">源码</a>下载地址（推荐使用码云中转下载）<br><a href="https://github.com/mybatis/parent/tree/master">mybatis-parent</a>项目下载地址</p><ol><li>选择自己所需要的MyBatis版本下载<img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/02-MyBatis-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.png" class></li><li>查看pom文件中所对应的mybatis-parent项目版本<img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/02-MyBatis-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.png" class></li><li>根据tag下载所需要的项目包。</li><li>导入idea，选择jdk进行编译。</li><li>新建一个maven模块<img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/02-MyBatis-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.png" class>pom文件引入依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- mybatis核心包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- jdbc的包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 查看日志文件的log4j包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 测试用的依赖包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.21.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ognl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ognl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>项目结构<img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/02-MyBatis-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.png" class><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mybatis.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qcc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span> com.mybatis.pojo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">private</span> String context;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getContext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> context;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setContext</span><span class="hljs-params">(String context)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.context = context;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, context=&#x27;&quot;</span> + context + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> com.mybatis.utils;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qcc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span> com.mybatis.utils</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;SqlSession&gt; threadLocal = <span class="hljs-keyword">new</span> ThreadLocal&lt;SqlSession&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 读取mybatis核心配置文件</span><br>            Reader reader = Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>            <span class="hljs-comment">// 创建会话工厂</span><br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(reader);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSession</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 获取会话</span><br>        SqlSession sqlSession = threadLocal.get();<br>        <span class="hljs-keyword">if</span> (sqlSession == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 从会话工厂获取session</span><br>            sqlSession = sqlSessionFactory.openSession();<br>            <span class="hljs-comment">// 绑定会话工厂</span><br>            threadLocal.set(sqlSession);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sqlSession;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>        SqlSession sqlSession = threadLocal.get();<br>        <span class="hljs-keyword">if</span> (sqlSession != <span class="hljs-keyword">null</span>) &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-comment">&lt;!-- namespace命名必须是唯一的,前期可以直接以所映射的pojo类的唯一路径来命名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.mybatis.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        mybaits通过自己手动写sql语句来对数据库进行操作,select就是查询操作</span><br><span class="hljs-comment">        同样有update,delete,insert</span><br><span class="hljs-comment">        id:标识符,测试时调用的标识符来调用sql语句,相当于方法名</span><br><span class="hljs-comment">        resultType:返回值类型</span><br><span class="hljs-comment">        parameterType:传入的参数类型</span><br><span class="hljs-comment">        如果是引用数据类型的话,需要传入完整的路径.如:java.lang.String以及对象com.mybatis.pojo.User</span><br><span class="hljs-comment">        在下方的条件需要以#&#123;&#125;来占位,如果传入类型是对象型,需要与对象的属性名一致</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findStudentById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.mybatis.pojo.User&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        select * from user where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.mybatis.pojo.User&quot;</span>&gt;</span><br>        select * from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 接收数据库的数据源(元数据) default默认读取以下的配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 针对不同的数据库来配置元数据 id:区分元数据 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置MySQL --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 事务的管理交给jdbc管理 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;jdbc&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 使用properties加载properties中的属性 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;pooled&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 配置Oracle --&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;environment id=&quot;oracle&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &amp;lt;!&amp;ndash; 事务的管理交给odbc管理 &amp;ndash;&amp;gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;transactionManager type=&quot;jdbc&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;dataSource type=&quot;pooled&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                &lt;property name=&quot;url&quot; value=&quot;jdbc:oracle:thin:@localhost:1521/test&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                &lt;property name=&quot;username&quot; value=&quot;scott&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;/dataSource&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/environment&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/userMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">driver</span>=com.mysql.jdbc.Driver<br><span class="hljs-attr">url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/a_test<br><span class="hljs-attr">username</span>=root<br><span class="hljs-attr">password</span>=root<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> Navicat Premium Data Transfer</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Source Server         : localhost</span><br><span class="hljs-comment"> Source Server Type    : MySQL</span><br><span class="hljs-comment"> Source Server Version : 50729</span><br><span class="hljs-comment"> Source Host           : localhost:3306</span><br><span class="hljs-comment"> Source Schema         : a_test</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Target Server Type    : MySQL</span><br><span class="hljs-comment"> Target Server Version : 50729</span><br><span class="hljs-comment"> File Encoding         : 65001</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Date: 18/05/2020 23:16:53</span><br><span class="hljs-comment">*/</span><br><br>SET NAMES utf8mb4;<br>SET FOREIGN_KEY_CHECKS = <span class="hljs-number">0</span>;<br><br>-- ----------------------------<br>-- Table structure <span class="hljs-keyword">for</span> user<br>-- ----------------------------<br>DROP TABLE IF EXISTS `user`;<br>CREATE TABLE `user` (<br>  `id` bigint(<span class="hljs-number">32</span>) NOT NULL,<br>  `username` varchar(<span class="hljs-number">255</span>) DEFAULT NULL,<br>  `password` varchar(<span class="hljs-number">32</span>) DEFAULT NULL,<br>  `context` varchar(<span class="hljs-number">1000</span>) DEFAULT NULL,<br>  <span class="hljs-function">PRIMARY <span class="hljs-title">KEY</span> <span class="hljs-params">(`id`)</span></span><br><span class="hljs-function">) ENGINE</span>=InnoDB DEFAULT CHARSET=utf8;<br><br>SET FOREIGN_KEY_CHECKS = <span class="hljs-number">1</span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mybatis.test;<br><br><span class="hljs-keyword">import</span> com.mybatis.pojo.User;<br><span class="hljs-keyword">import</span> com.mybatis.utils.MybatisUtil;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qcc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span> com.mybatis.test</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMybatis01</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> SqlSession session = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//获取会话</span><br>        session = MybatisUtil.getSession();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 从会话中调用映射文件中的sql语句,为了防止不同的映射文件标识符重复,通过namespace.标识符来调用</span><br><span class="hljs-comment">         * 如果后面有参数的话,在后面添加参数</span><br><span class="hljs-comment">         */</span><br>        User user = session.selectOne(<span class="hljs-string">&quot;com.mybatis.pojo.User.findStudentById&quot;</span>,<span class="hljs-number">1</span>);<br>        System.out.println(user);<br>        List&lt;User&gt; studentList = session.selectList(<span class="hljs-string">&quot;com.mybatis.pojo.User.findAll&quot;</span>);<br>        <span class="hljs-keyword">for</span> (User student2 : studentList) &#123;<br>            System.out.println(student2);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>&#123;<br>        session.commit();<br>        MybatisUtil.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>运行TestMybatis01中的select(),结果如图所示</li></ol><img src="/2020/05/18/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/02-MyBatis-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/5.png" class><p>至此，mybatis源码阅读项目建立成功。</p>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码阅读</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01-MyBatis</title>
    <link href="/2020/05/17/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/01-MyBatis/"/>
    <url>/2020/05/17/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/01-MyBatis/</url>
    
    <content type="html"><![CDATA[<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p>MyBatis<a href="https://mybatis.org/mybatis-3/zh/index.html">官方文档</a></p><h2 id="什么是-MyBatis？"><a href="#什么是-MyBatis？" class="headerlink" title="什么是 MyBatis？"></a>什么是 MyBatis？</h2><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><img src="/2020/05/17/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/mybatis%E7%9A%84%E4%B8%80%E7%94%9F/01-MyBatis/MyBatis.png" class>]]></content>
    
    
    <categories>
      
      <category>编程笔记</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码阅读</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
